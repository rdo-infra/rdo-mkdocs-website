{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is RDO?","text":"<p>RDO is a community of people using and deploying OpenStack on CentOS Stream and Red Hat Enterprise Linux. We have documentation to help get started, mailing lists where you can connect with other users, and community-supported packages of the most up-to-date OpenStack releases available for download.</p> <p>If you are looking for enterprise-level support, or information on partner certification, Red Hat also offers Red Hat OpenStack Platform.</p> <p>OpenStack relies on the underlying operating system and hypervisor \u2014 and what better operating system to build on than the industry's leading enterprise operating system? The RDO community is your one-stop community site for all things related to using OpenStack on Red Hat based platforms. What's happening?</p>"},{"location":"#find-us","title":"Find us!","text":"<ul> <li>Documentation to help you get started</li> <li>Mailing lists</li> <li>Report a bug in RDO Jira</li> </ul>"},{"location":"#take-a-shortcut","title":"Take a shortcut","text":"<ul> <li>How to deploy RDO?</li> <li>How to add a package?</li> <li>How to update a dependency?</li> </ul>"},{"location":"community/","title":"Community","text":"<p>Help us make the RDO community site a great place for users and cloud operators in the Red Hat ecosystem. There are many ways to contribute to RDO, some of which are detailed below.</p> <p>Our community strives to operate according to the terms of the OpenStack Code of Conduct.</p> <p>If you're just getting started, and are looking for a little help, consult our mentors list.</p>"},{"location":"community/#people-person","title":"People person","text":"<ul> <li>Join the RDO mailing lists</li> <li>Chat on #rdo on OFTC</li> <li>Participate in weekly meetings</li> </ul>"},{"location":"community/#latest-rdo-activity","title":"Latest RDO activity","text":""},{"location":"community/#rdo-epoxy-20251-released","title":"RDO Epoxy 2025.1 released!","text":"<p>RDO Epoxy 2025.1 Release - Important Note at Bottom</p> <p>The RDO community is pleased to announce the general availability of RDO builds for OpenStack 2025.1 Epoxy for RPM-based distributions, CentOS Stream and Red Hat Enterprise Linux. RDO is suitable for building private, public and hybrid clouds. Epoxy is the 31st release of the OpenStack project, backed by over 1,000 contributors worldwide.</p> <p>This release is already available on CentOS Stream 9 on the CentOS mirror network:</p> <p>https://mirror.stream.centos.org/SIGs/9-stream/cloud/x86_64/openstack-epoxy/</p> <p>The RDO community project curates, packages, builds, tests, and maintains a complete set of OpenStack components for RHEL and CentOS Stream and is a member of the CentOS Cloud SIG. The Cloud SIG focuses on delivering a great user experience for CentOS users looking to build and maintain on-premise, public, or hybrid clouds.</p> <p>All work on RDO and its downstream release, Red Hat OpenStack Services on OpenShift, is 100% open source, with all code changes going into it's related upstream first.</p> <p>You can read the broader upstream OpenStack project highlights at https://releases.openstack.org/epoxy/highlights.html, but here are some highlights:</p> <ul> <li>Notably, active/active support for Dell PowerStore, Dell PowerStore QoS support, NetApp adding support for active/active mode in ISCSI/FC drivers, HPE Nimble replication, and StorPool adding support for pool-to-pool cloning.</li> <li>To address OSSN-0090 and OSSN-0065, support was added for a new add/get location API that replaces the image update (old location-add) mechanism for consumers such as cinder and nova.</li> <li>Ironic includes multiple security improvements:</li> <li>All supported mechanism drivers (ML2/OVS, ML2/OVN) can now use the WSGI API module, and the first phase of deprecation of the eventlet library is complete.</li> <li>Instances with UEFI can now boot in stateless pending if the image has the hw_firmware_statelessproperty and the compute service has libvirt 8.6.0 or later.</li> </ul> <p>According to this model (https://governance.openstack.org/tc/resolutions/20220210-release-cadence-adjustment.html), upgrades will only be supported from the Caracal 2024.1 release to the next SLURP release (phase Epoxy).</p> <p>RDO Epoxy 2025.1 has been published by the CentOS Storage SIG in the official CentOS repository and has been built and tested with the latest released Ceph 18.2.0 Reef version (https://docs.ceph.com/en/latest/releases/reef/). Note: Follow the instructions in the RDO documentation to install OpenStack and Ceph services on the same host.</p> <p>During Epoxy cycle, some projects have been retired or declared inactive upstream. As such, the following packages for some projects are not present in the RDO Epoxy 2025.1 release:</p> <ul> <li>python-saharaclient (https://review.rdoproject.org/r/c/rdoinfo/+/54360)</li> <li>puppet-corosync (https://review.rdoproject.org/r/c/rdoinfo/+/53127)</li> <li>python-oauth2client (dependency https://review.rdoproject.org/r/c/rdoinfo/+/54115)</li> </ul> <p>During the next release we will continue working on retiring inactive packages in order to ensure RDO content quality and security.</p>"},{"location":"community/#contributors","title":"Contributors:","text":"<p>During the Epoxy cycle, we saw the following new RDO contributors:</p> <ul> <li>Ashish Gupta</li> <li>Dmitriy Chubinidze</li> <li>Francisco Seruca Salgado</li> <li>Ivan Anfimov</li> <li>Lilach Avraham</li> <li>Manoj Katari</li> <li>Saurabh Agarwal</li> <li>Sofer Athlan-Guyot</li> <li>Viji Candappa</li> </ul>"},{"location":"community/#welcome-to-all-of-you-and-thank-you-so-much-for-participating","title":"Welcome to all of you and Thank You So Much for participating!","text":"<p>But we wouldn\u2019t want to overlook anyone. A super massive Thank You to all 51 contributors who participated in producing this release. This list includes commits to rdo-packages, rdo-infra, and rdo-website repositories:</p> <ul> <li>Alan Pevec</li> <li>Alfredo Moralejo</li> <li>Amy Marrich</li> <li>Ananya Banerjee</li> <li>Artom Lifshitz</li> <li>Ashish Gupta</li> <li>Bogdan Dobrelya</li> <li>Chandan Kumar</li> <li>Daniel Pawlik</li> <li>Dmitriy Chubinidze</li> <li>Douglas Viroel</li> <li>Eduardo Olivares</li> <li>Fiorella Yanac</li> <li>Francesco Pantano</li> <li>Francisco Seruca Salgado</li> <li>Harald Jens\u00e5s</li> <li>Ivan Anfimov</li> <li>Jakub Libosvar</li> <li>Jarom\u00edr Wysoglad</li> <li>Joan Francesc Gilabert</li> <li>Joel Capitao</li> <li>Karolina Kula</li> <li>Lewis Denny</li> <li>Lilach Avraham</li> <li>Luigi Toscano</li> <li>Manoj Katari</li> <li>Maor Blaustein</li> <li>Martin Kopec</li> <li>Matthias Runge</li> <li>Matthieu Huin</li> <li>Miguel Garcia</li> <li>Miko\u0142aj Ciecierski</li> <li>Pablo Rodr\u00edguez Nava</li> <li>Pooja Jadhav</li> <li>Rabi Mishra</li> <li>Radomir Dopieralski</li> <li>Rodolfo Alonso</li> <li>Ronelle Landy</li> <li>Saurabh Agarwal</li> <li>Sergii Golovatiuk</li> <li>Shreshtha Joshi</li> <li>S\u0142awek Kap\u0142o\u0144ski</li> <li>Sofer Athlan-Guyot</li> <li>Takashi Kajinami</li> <li>Tobias Urdin</li> <li>Tony Breeds</li> <li>Viji Candappa</li> <li>Yatin Karel</li> </ul>"},{"location":"community/#the-next-release-cycle","title":"The Next Release Cycle","text":"<p>At the end of one release, focus shifts immediately to the next release i.e Epoxy.</p>"},{"location":"community/#get-started","title":"Get Started","text":"<p>To spin up a proof of concept cloud, quickly, and on limited hardware, try an All-In-One Packstack installation. You can run RDO on a single node to get a feel for how it works.</p> <p>For those that do not have any hardware or physical resources, there is the OpenStack Global Passport Program. This is a collaborative effort between OpenStack public cloud providers to let you experience the freedom, performance and interoperability of open source infrastructure. You can quickly and easily gain access to OpenStack infrastructure via trial programs from participating OpenStack public cloud providers around the world.</p>"},{"location":"community/#get-help","title":"Get Help","text":"<p>The RDO Project has our users@lists.rdoproject.org for RDO-specific users and operators. For more developer-oriented content we recommend joining the dev@lists.rdoproject.org mailing list. Remember to post a brief introduction about yourself and your RDO story. The mailing lists archives are all available at https://www.rdoproject.org/community/mailing-lists/. You can also find extensive documentation on RDOproject.org.</p> <p>The #rdo channel on OFTC IRC is also an excellent place to find and give help.</p> <p>We also welcome comments and requests on the CentOS devel mailing list and the CentOS IRC channels (#centos, #centos-cloud, #centos-devel in Libera.Chat network), however we have a more focused audience within the RDO venues.</p> <p>Join us in #rdo and on the OFTC IRC network. You can also find us on Facebook and YouTube.</p>"},{"location":"community/#important-note","title":"Important Note!","text":"<p>We had a thriving, if small, group of community members maintaining packages prior to COVID and we need to return to those days of having folks participate in this effort. The OpenStack RPM packaging effort is in need of package maintainers in order to continue having RPMs. The current maintainers have moved on to new opportunities, so while we have folks continuing to contribute, we currently have no folks to build and maintain packages. Please check out the RDO contribute pages, peruse the CentOS Cloud SIG page, and inhale the RDO packaging documentation. Please reach out if you can help!</p>"},{"location":"community/#centos-connect-brussels-2024","title":"CentOS Connect, Brussels, 2024","text":""},{"location":"community/#centos-connect-brussels-2023","title":"CentOS Connect, Brussels, 2023","text":"<p>See more at dedicated page.</p>"},{"location":"community/#user","title":"User","text":"<ul> <li>Share questions and solutions on openstack mailing lists</li> <li>Add the most useful solutions</li> </ul>"},{"location":"community/#discuss","title":"Discuss","text":""},{"location":"community/#irc-channels","title":"IRC channels","text":"<p>Come chat in real-time with RDO users on IRC on the OFTC server:</p> <ul> <li> <p>#rdo: Any general conversation about RDO, including developer issues and user questions. (Transcripts.)</p> </li> <li> <p>#openstack: Remember that RDO is just a small part of a larger community. Questions about OpenStack in general, not specifically about RDO, should go to the upstream channel. (Transcripts.)</p> </li> </ul> <p>Come chat in real-time with the CentOS Cloud SIG  on IRC on the Libera Chat server:</p> <ul> <li>#centos-cloud: If you have questions about the CentOS Cloud Special Interest Group (SIG) and the parts of the RDO infrastructure that run in the CentOS Community Build System (cbs), this is where you're most likely to get answers.</li> <li>#centos-devel: If you have questions about the CentOS Project</li> </ul>"},{"location":"community/#irc-meetings","title":"IRC meetings","text":"<p>We have weekly IRC meetings you can participate in:</p> <ul> <li>RDO meetings @ every Wednesday at 14:00 UTC on #rdo on OFTC</li> <li>CentOS Cloud SIG meetings on the second Thursday of the month at 15:00 UTC on #centos-meeting on Libera Chat</li> </ul>"},{"location":"community/#content-writer","title":"Content writer","text":"<p>All contributions are welcome, so if you would like to contribute to this page or propose change, there are two options for that:</p> <ul> <li>Propose change by Gerrrit</li> <li>Create RDO Jira issue (selecting \"documentation\" component during creation), if you are not familiar with this workflow, however, you can find instructions in our onboarding.</li> </ul>"},{"location":"community/#additional-sources","title":"Additional sources","text":"<ul> <li>Check our Frequently Asked Questions (FAQ) page for answers to common questions</li> <li>Try our troubleshooting page for solutions to common problems</li> <li>Watch RDO videos. These include recorded talks and community events.</li> <li>Help improve our knowledge base by turning the best answers to questions on the mailing lists.</li> <li>Fork the website on Github and help us improve our documentation.</li> </ul>"},{"location":"community/community-meeting/","title":"Community meeting","text":"<p>We hold our weekly community meeting every Wednesday at 14:00 UTC. The first week of the month is a virtual meeting held at https://meet.google.com/uzo-tfkt-top. All other weeks, the meeting is held on the #rdo IRC channel (OFTC - oftc.net).</p> <p>The agenda for that meeting is in this etherpad.</p> <p>The minutes for these meetings are below:</p> <ul> <li>Mar 26, 2025</li> <li>Mar 19, 2025</li> <li>Mar 12, 2025</li> <li>Feb 26, 2025</li> <li>Feb 12, 2025</li> <li>Jan 22, 2025</li> <li>Jan 08, 2025</li> <li>Dec 18, 2024</li> <li>Nov 06, 2024</li> <li>Oct 16, 2024</li> <li>Oct 09, 2024</li> <li>Sep 25, 2024</li> <li>Sep 11, 2024</li> <li>Aug 21, 2024</li> <li>Jul 17, 2024</li> <li>Jul 03, 2024</li> <li>Jun 26, 2024</li> <li>Jun 10, 2024</li> <li>May 29, 2024</li> <li>May 22, 2024</li> <li>Apr 24, 2024</li> <li>Apr 17, 2024</li> <li>Apr 10, 2024</li> <li>Apr 03, 2024</li> <li>Mar 27, 2024</li> <li>Mar 20, 2024</li> <li>Mar 13, 2024</li> <li>Mar 06, 2024</li> <li>Feb 14, 2024</li> <li>Feb 07, 2024</li> <li>Jan 24, 2023</li> <li>Jan 10, 2023</li> <li>Nov 29, 2023</li> <li>Nov 22, 2023</li> <li>Oct 25, 2023</li> <li>Oct 18, 2023</li> <li>Oct 11, 2023</li> <li>Oct 04, 2023</li> <li>Sep 27, 2023</li> <li>Sep 20, 2023</li> <li>Sep 13, 2023</li> <li>Sep 06, 2023</li> <li>Aug 16, 2023</li> <li>Aug 09, 2023</li> <li>Aug 02, 2023</li> <li>Jul 26, 2023</li> <li>Jul 19, 2023</li> <li>Jul 12, 2023</li> <li>Jul 05, 2023</li> <li>Jun 28, 2023</li> <li>Jun 21, 2023</li> <li>Jun 14, 2023</li> <li>Jun 07, 2023</li> <li>May 31, 2023</li> <li>May 24, 2023</li> <li>May 17, 2023</li> <li>May 10, 2023</li> <li>May 03, 2023</li> <li>Apr 26, 2023</li> <li>Apr 19, 2023</li> <li>Apr 12, 2023</li> <li>Apr 05, 2023</li> <li>Mar 29, 2023</li> <li>Mar 22, 2023</li> <li>Mar 15, 2023</li> <li>Mar 08, 2023</li> <li>Mar 01, 2023</li> <li>Feb 22, 2023</li> <li>Feb 15, 2023</li> <li>Feb 08, 2023</li> <li>Jan 25, 2023</li> <li>Jan 18, 2023</li> <li>Jan 11, 2023</li> <li>Dec 21, 2022</li> <li>Dec 14, 2022</li> <li>Nov 30, 2022</li> <li>Nov 23, 2022</li> <li>Nov 16, 2022</li> <li>Oct 26, 2022</li> <li>Oct 19, 2022</li> <li>Oct 05, 2022</li> <li>Sep 28, 2022</li> <li>Sep 21, 2022</li> <li>Sep 14, 2022</li> <li>Sep 07, 2022</li> <li>Aug 31, 2022</li> <li>Aug 24, 2022</li> <li>Aug 17, 2022</li> <li>Aug 10, 2022</li> <li>Aug 03, 2022</li> <li>July 27, 2022</li> <li>July 20, 2022</li> <li>July 13, 2022</li> <li>July 06, 2022</li> <li>June 29, 2022</li> <li>June 22, 2022</li> <li>June 15, 2022</li> <li>June 01, 2022</li> <li>May 25, 2022</li> <li>May 18, 2022</li> <li>May 11, 2022</li> <li>Apr 27, 2022</li> <li>Apr 20, 2022</li> <li>Apr 13, 2022</li> <li>Mar 30, 2022</li> <li>Mar 23, 2022</li> <li>Mar 16, 2022</li> <li>Mar 09, 2022</li> <li>Feb 23, 2022</li> <li>Feb 16, 2022</li> <li>Feb 09, 2022</li> <li>Jan 12, 2022</li> <li>Jan 05, 2022</li> <li>Dec 15, 2021</li> <li>Dec 08. 2021</li> <li>Nov 24. 2021</li> <li>Nov 10. 2021</li> <li>Nov 03. 2021</li> <li>Oct 27. 2021</li> <li>Oct 20. 2021</li> <li>Oct 13. 2021</li> <li>Oct 06. 2021</li> <li>Sep 29. 2021</li> <li>Sep 22. 2021</li> <li>Sep 15. 2021</li> <li>Sep 08. 2021</li> <li>Sep 01. 2021</li> <li>Aug 25. 2021</li> <li>Aug 18. 2021</li> <li>Aug 11. 2021</li> <li>Aug 04. 2021</li> <li>Jul 28. 2021</li> <li>Jul 21. 2021</li> <li>Jul 07. 2021</li> <li>Jun 30. 2021</li> <li>Jun 23. 2021</li> <li>Jun 16. 2021</li> <li>Jun 09. 2021</li> <li>Jun 02. 2021</li> <li>May 19. 2021</li> <li>May 12. 2021</li> <li>Apr 28. 2021</li> <li>Apr 14. 2021</li> <li>Apr 07. 2021</li> <li>Mar 31. 2021</li> <li>Mar 24. 2021</li> <li>Mar 17. 2021</li> <li>Mar 10. 2021</li> <li>Mar 03. 2021</li> <li>Feb 24. 2021</li> <li>Feb 17. 2021</li> <li>Feb 10. 2021</li> <li>Feb 03. 2021</li> <li>Jan 27. 2021</li> <li>Jan 20. 2021</li> <li>Jan 13. 2021</li> <li>Jan 06. 2021</li> <li>Dec 16. 2020</li> <li>Dec 09. 2020</li> <li>Dec 02, 2020</li> <li>Nov 25, 2020</li> <li>Nov 18, 2020</li> <li>Nov 11, 2020</li> <li>Oct 21, 2020</li> <li>Oct 14, 2020</li> <li>Oct 07, 2020</li> <li>Sep 30, 2020</li> <li>Sep 23, 2020</li> <li>Sep 16, 2020</li> <li>Sep 09, 2020</li> <li>Sep 02, 2020</li> <li>Aug 26, 2020</li> <li>Aug 19, 2020</li> <li>Aug 12, 2020</li> <li>Aug 05, 2020</li> <li>Jul 29, 2020</li> <li>Jul 22, 2020</li> <li>Jul 15, 2020</li> <li>Jul 08, 2020</li> <li>Jul 01, 2020</li> <li>Jun 24, 2020</li> <li>Jun 17, 2020</li> <li>Jun 10, 2020</li> <li>May 27, 2020</li> <li>May 20, 2020</li> <li>May 13, 2020</li> <li>Apr 29, 2020</li> <li>Apr 22, 2020</li> <li>Apr 15, 2020</li> <li>Apr 08, 2020</li> <li>Apr 01, 2020</li> <li>Mar 25, 2020</li> <li>Mar 18, 2020</li> <li>Mar 11, 2020</li> <li>Mar 04, 2020</li> <li>Feb 26, 2020</li> <li>Feb 19, 2020</li> <li>Feb 12, 2020</li> <li>Feb 05, 2020</li> <li>Jan 29, 2020</li> <li>Jan 22, 2020</li> <li>Jan 15, 2020</li> <li>Jan 08, 2020</li> <li>Dec 18, 2019</li> <li>Ded 11, 2019</li> <li>Nov 27, 2019</li> <li>Nov 20, 2019</li> <li>Nov 13, 2019</li> <li>Nov 06, 2019</li> <li>Oct 30, 2019</li> <li>Oct 23, 2019</li> <li>Oct 16, 2019</li> <li>Oct 09, 2019</li> <li>Oct 02, 2019</li> <li>Sep 11, 2019</li> <li>Jun 12, 2019</li> <li>May 05, 2019</li> <li>Mar 27, 2019</li> <li>Mar 06, 2019</li> <li>Jan 23, 2019</li> <li>Jan 16, 2019</li> <li>Dec 19, 2018</li> <li>Dec 12, 2018</li> <li>Nov 28, 2018</li> <li>Nov 21, 2018</li> <li>Nov 14, 2018</li> <li>Nov 07, 2018</li> <li>Oct 17, 2018</li> <li>Oct 10, 2018</li> <li>Sep 19, 2018</li> <li>Sep 05, 2018</li> <li>Aug 29, 2018</li> <li>Aug 08, 2018</li> <li>Aug 01, 2018</li> <li>Jul 18, 2018</li> <li>Jul 11, 2018</li> <li>Jun 27, 2018</li> <li>Jun 20, 2018</li> <li>June 13, 2018</li> <li>June 06, 2018</li> <li>May 23, 2018</li> <li>May 16, 2018</li> <li>May 09, 2018</li> <li>May 02, 2018</li> <li>Apr 11, 2018</li> <li>Apr 04, 2018</li> <li>Mar 14, 2018</li> <li>Mar 7, 2018</li> <li>Feb 21, 2018</li> <li>Feb 14, 2018</li> <li>Feb 07, 2018</li> <li>Jan 31, 2018</li> <li>Jan 17, 2018</li> <li>Jan 10, 2018</li> <li>Nov 22, 2017</li> <li>Nov 15, 2017</li> <li>Nov 08, 2017</li> <li>Nov 01, 2017</li> <li>Oct 18, 2017</li> <li>Oct 11, 2017</li> <li>Oct 04, 2017</li> <li>Sep 20, 2017</li> <li>Sep 6, 2017</li> <li>Aug 23, 2017</li> <li>Aug 16, 2017</li> <li>Aug 09, 2017</li> <li>Jul 12, 2017</li> <li>Jul 5, 2017</li> <li>Jun 14, 2017</li> <li>Jun 7, 2017</li> <li>May 24, 2017</li> <li>May 3, 2017</li> <li>March 29, 2017</li> <li>March 15, 2017</li> <li>March 1, 2017</li> <li>February 15, 2017</li> <li>February 8, 2017</li> <li>January 18, 2017</li> <li>December 21, 2016</li> <li>December 14, 2016</li> <li>December 7, 2016</li> <li>November 30, 2016</li> <li>November 23, 2016</li> <li>October 5, 2016</li> <li>August 17, 2016</li> <li>July 6, 2016</li> <li>June 15, 2016</li> <li>June 1, 2016</li> <li>May 18, 2016</li> <li>May 11, 2016</li> <li>April 20, 2016</li> <li>March 16, 2016</li> <li>March 9, 2016</li> <li>January 20, 2016</li> <li>January 13, 2016</li> <li>January 6,  2016</li> </ul>"},{"location":"community/faq/","title":"Frequently Asked Questions","text":""},{"location":"community/faq/#what-is-rdo","title":"What is RDO?","text":"<p>RDO is two things. It's a freely-available, community-supported distribution of OpenStack that runs on Red Hat Enterprise Linux (RHEL) and its derivatives, such as CentOS Stream.</p> <p>In addition to providing a set of software packages, RDO is also a community of users of cloud computing platform on Red Hat-based operating systems to get help and compare notes on running OpenStack.</p> <p>RDO aims to be the natural option for anyone that wants to run the most recently released version of OpenStack on supported systems. Whether you are interested in running OpenStack on RHEL in a production environment, or doing a proof of concept deployment on CentOS Stream, RDO is for you.</p>"},{"location":"community/faq/#what-does-rdo-stand-for","title":"What does RDO stand for?","text":"<p>RDO is the RPM Distribution of OpenStack. It's a group of Rediculously Dedicated OpenStackers who are here to help you Rapidly Deploy OpenStack, in a way that is Really Darned Obvious. RDO is Rebuilt Daily, Regularly Delivered, OpenStack.</p>"},{"location":"community/faq/#what-is-openstack","title":"What is OpenStack?","text":"<p>OpenStack is an open source project for building a private or public infrastructure-as-a-service (IaaS) cloud running on standard hardware. You can learn more about it by visiting www.openstack org.</p>"},{"location":"community/faq/#why-is-rdo-needed","title":"Why is RDO needed?","text":"<p>Just as a traditional operating system relies on the hardware beneath it, so too does the OpenStack cloud operating system rely on the foundation of a hypervisor and OS platform. RDO makes it easy to install and deploy the most up-to-date OpenStack components on the industry's most trusted Linux platform, Red Hat Enterprise Linux. and on RHEL derivatives like CentOS Stream, and Scientific Linux.</p>"},{"location":"community/faq/#why-should-i-use-an-openstack-distribution-from-red-hat","title":"Why should I use an OpenStack distribution from Red Hat?","text":"<p>The OpenStack project benefits from a broad group of providers and distributors, but none match Red Hat's combination of production experience, technical expertise, and commitment to the open source way of producing software. Some of the largest production clouds in the world run on and are supported by Red Hat, and Red Hat engineers contribute to every layer of the OpenStack platform. From the Linux kernel and the KVM hypervisor to the top level OpenStack project components, Red Hat is at or near the top of the list in terms of number of developers and of contributions.</p>"},{"location":"community/faq/#for-which-distributions-does-rdo-provide-packages","title":"For which distributions does RDO provide packages?","text":"<p>RDO targets Red Hat Enterprise Linux, CentOS Stream and their derivatives. Specifically, RDO packages are available for RHEL 7.0 or later (and CentOS 7.0, Scientific Linux 7.0 and other similar derivatives). More information is available at Release-cadence.</p>"},{"location":"community/faq/#how-is-rdo-different-from-upstream","title":"How is RDO different from upstream?","text":"<p>The OpenStack project develops code, and does not handle packaging for specific platforms. As a distribution of OpenStack, RDO packages the upstream OpenStack components to run well together on CentOS Stream, Red Hat Enterprise Linux and their derivatives, and provides you with installation tools to make it easier for you to deploy OpenStack.</p> <p>Stable client branches are maintained per release as part of RDO because client backward compatibility isn't guaranteed upstream.</p>"},{"location":"community/faq/#how-can-i-participate","title":"How can I participate?","text":"<p>Feel free to contribute any packaging and integration patches via our developer mailing lists, or propose improvements to OpenStack on the upstream Launchpad page. For more information, see getting involved.</p>"},{"location":"community/faq/#is-rdo-a-fork-of-openstack","title":"Is RDO a fork of OpenStack?","text":"<p>RDO is not a fork of OpenStack, but a community focused on packaging and integrating code from the upstream OpenStack project on CentOS Stream and Red Hat Enterprise Linux. Red Hat continues to participate in the development of the core OpenStack projects upstream, and all relevant patches and bug reports are routed directly to the OpenStack community code base.</p>"},{"location":"community/faq/#how-do-i-deploy-rdo","title":"How do I deploy RDO?","text":"<p>You have multiple options, including:</p> <ol> <li> <p>Check out dedicated aritcle about RDO deployments</p> </li> <li> <p>For proof of concept (PoC) environments, Packstack, an installation utility which uses Puppet modules to deploy OpenStack, is the primary tool. Instructions on installing RDO with Packstack are available on the Packstack quickstart page.</p> </li> <li> <p>For manual deployments using RDO packages, read the upstream OpenStack Installation Tutorial.</p> </li> </ol>"},{"location":"community/faq/#where-can-i-find-help-with-rdo","title":"Where can I find help with RDO?","text":"<p>You can find documentation and get help through IRC, or mailing lists and from others in the RDO community. And don't hesitate to answer someone else's question if you know the answer. You can find all of the ways you can get involved in the RDO community at Get involved.</p>"},{"location":"community/faq/#can-i-buy-commercial-support-for-rdo","title":"Can I buy commercial support for RDO?","text":"<p>No commercial support for RDO will be available from Red Hat. If you need support for your OpenStack deployments, Red Hat offers Red Hat OpenStack Platform including a Partner Certification Program and Red Hat's award-winning support offering.</p>"},{"location":"community/faq/#what-is-the-errata-or-updates-policy-for-rdo","title":"What is the errata or updates policy for RDO?","text":"<p>RDO updates when the OpenStack project provides updates. RDO provides no lifecycle guarantees beyond what the upstream project provides. If you require additional guarantees, see Red Hat OpenStack Platform.</p>"},{"location":"community/faq/#can-i-upgrade-between-versions-of-rdo","title":"Can I upgrade between versions of RDO?","text":"<p>RDO users are advised to upgrade between consecutive OpenStack versions. The RDO project strives to release updated OpenStack versions as soon as possible following upstream releases, on the order of hours to a few days.</p> <p>The upgrade process differs depending on what tool was used for deployment, however RDO project currently doesn't validate manual deployments.</p>"},{"location":"community/faq/#how-often-are-bug-fix-updates-of-rdo-made-available","title":"How often are bug fix updates of RDO made available?","text":"<p>We make RDO bug fix updates available asynchronously by following the stable bug fix releases of upstream OpenStack projects.</p>"},{"location":"community/faq/#where-is-rdo-built","title":"Where is RDO built?","text":"<p>RDO is built using CentOS infrastructure, similar to how CentOS packages are built. The build system is accessible at CBS.</p>"},{"location":"community/faq/#what-is-the-relationship-between-rdo-and-red-hats-commercial-openstack-product","title":"What is the relationship between RDO and Red Hat's commercial OpenStack product?","text":"<p>RDO is a community-supported OpenStack distribution that tracks the latest version of OpenStack upstream, beginning with OpenStack Grizzly. Red Hat OpenStack Platform is an enterprise-ready commercially-supported product from Red Hat.</p>"},{"location":"community/irc-etiquette/","title":"IRC etiquette","text":"<p>See also the list of IRC channels, and the general mentors list for more suggestions of who you might ask.</p>"},{"location":"community/irc-etiquette/#irc-communication-guidelines-and-etiquette","title":"IRC communication guidelines and etiquette","text":""},{"location":"community/irc-etiquette/#guidelines","title":"Guidelines","text":"<p>These are just some guidelines so you get a perspective of IRC culture, communication:</p> <ul> <li>Try to ask smart questions, let us try to think for ourselves first and not let some poor, good-intentioned soul to do all the thinking for us. [Pro-tip: Eric S. Raymond's guide referred in the Resources section]</li> <li>Try (as humanly as possible) to be: clear, concrete, specific and complete with your statements/questions. People cannot read your mind.</li> <li>Be patient: do not expect people will devote time for extreme hand-holding. If a URL is pointed, please try things yourself, do your home-work, use Google effectively.</li> <li>Try to maintain a balance of taking vs giving from the community. Do not demand excessive attention.</li> <li>IRC is a DIY environment, not a paid-support forum. If someone responds to you, that is a bonus.</li> <li>Be reminded: respect people's time, always answering IRC questions isn't developers first priority. Someone could be knee deep in gdb/pdb investigating that time-critical bug.</li> <li>When in a community environment, just post the question to the channel, you do not have to ping a specific person just because he/she answered your question before. Nor do you have to ask questions like \"Anyone alive on this channel?\" \"Are you using ABC?\" Stay channel topic related!</li> <li>It is an international channel: you may get better responses in certain time-zones, be patient - don't count on instant reactions.</li> </ul> <p>All of the above look dead obvious, but doesn't instantly come to mind when asking questions in a public IRC. And, sure - we also understand we are all human, already overwhelmed and sometimes, we Just Need that answer and not want to follow any heavy instructions. If you're lucky, you might even have the bonus of getting it answered instantly.</p>"},{"location":"community/irc-etiquette/#pinging-for-attention-please-avoid-a-naked-ping","title":"Pinging for attention (please avoid a 'naked ping')","text":"<p>If you're not aware of what a 'naked ping' is, please take 3 minutes to read this excellent post.</p>"},{"location":"community/irc-etiquette/#do","title":"Do:","text":"<p>To save everyone's time, please try to ping with a specific request/question/comment.</p> <p>Preferred:</p> <pre><code>&lt;Bob&gt; Alice: Ping,  re:  a certain topic (or a specific question)\n</code></pre> <p>Even better: if possible, a fully self-contained question requesting a clear action, so the person you pinged may come back 3 hours later and respond at her/his own pace:</p> <pre><code>&lt;Bob&gt; Alice: Ping, re: bug#1456234. Don't you think the reporter\n             should retest with that specific version of openstack-nova\n             mentioned in comment#4? It fixes the bug.\n\n    [3 HOURS LATER. . .]\n\n&lt;Alice&gt; Bob: Hi, you were right with that bug. I had an incorrect assumption.\n             I just closed the bug, adding a relevant rationale.\n</code></pre> <p>(Agreed -- not all questions can be that self-contained, but you get the drift.)</p>"},{"location":"community/irc-etiquette/#dont","title":"Don't:","text":"<p>In short: please avoid -- a-ping-followed-by-permission-to-ask-a-question-followed-by-long-silence. Or any similar variants.</p> <p>i.e. do not do a naked ping with no request for any information or any question:</p> <pre><code>&lt;Bob&gt; Alice: Ping\n\n    [LONG SILENCE. . .]\n</code></pre> <p>nor this:</p> <pre><code>&lt;Bob&gt; Alice: Ping\n&lt;Alice&gt; Bob: Pong?\n&lt;Bob&gt; Alice: Can I talk to you now? I have a technical question to discuss\n\n    [LONG SILENCE. . .]\n\n&lt;Alice&gt; Bob: Sure.    (Inside Alice's head -- 'Sigh, will you already ask the question please?!')\n\n    [Again, in some cases, this interrupt is  followed by a long SILENCE. . . ]\n\n&lt;Bob&gt; Alice: A vague question with not so clear details.\n</code></pre> <p>You see what a time drain the above has become which has not led to any meaningful exchange? At this point, I'm sure you can clearly imagine what a test of mental sanity it'll be for Alice to have 10 to 12 pings like that each day. Let's not do that.</p>"},{"location":"community/irc-etiquette/#resources","title":"Resources","text":"<ul> <li>A fantastic resource from Eric S. Raymond on how to ask smart questions</li> <li>Other communities (Fedora project) IRC communication guidelines</li> </ul>"},{"location":"community/mailing-lists/","title":"Mailing lists","text":"<p>There are three main mailing lists for RDO discussion:</p>"},{"location":"community/mailing-lists/#users-userslistsrdoprojectorg","title":"Users - users@lists.rdoproject.org","text":"<p>The main discussion list if you are looking for help on the RDO project.</p> <ul> <li>Subscribe</li> <li>Archives</li> </ul>"},{"location":"community/mailing-lists/#developers-devlistsrdoprojectorg","title":"Developers - dev@lists.rdoproject.org","text":"<p>The main discussion list for RDO project contributors.</p> <ul> <li>Subscribe</li> <li>Archives</li> </ul>"},{"location":"community/mailing-lists/#newsletter-newsletterlistsrdoprojectorg-inactive","title":"Newsletter - newsletter@lists.rdoproject.org - inactive","text":"<p>A monthly update of what's going on at RDO. This list is read-only, and very low volume.</p> <ul> <li>~~Subscribe~~ [ARCHIVED]</li> <li>Archives</li> </ul>"},{"location":"community/mailing-lists/#other-lists","title":"Other lists","text":"<p>A complete list of mailing lists may be found at RDO Mailing-lists.</p> <p>You may also want to be on one or more of the OpenStack mailing lists.</p>"},{"location":"community/rdo-videos/","title":"RDO videos","text":""},{"location":"community/rdo-videos/#centos-connect-brussels-2024","title":"Centos Connect, Brussels, 2024","text":""},{"location":"community/rdo-videos/#centos-connect-brussels-2023","title":"Centos Connect, Brussels, 2023","text":""},{"location":"community/rdo-videos/#openstack-ptg-atlanta-2017","title":"OpenStack PTG, Atlanta, 2017","text":"<ul> <li>What did you do in OpenStack Ocata?</li> </ul>"},{"location":"community/rdo-videos/#centos-dojo-brussels-2017","title":"CentOS Dojo, Brussels, 2017","text":"<ul> <li>Watch videos from the event in Videos from the CentOS Dojo, Brussels, 2017.</li> </ul>"},{"location":"community/rdo-videos/#rdo-bof-openstack-summit-austin","title":"RDO BoF @ OpenStack Summit Austin","text":""},{"location":"community/rdo-videos/#fosdem-2016","title":"FOSDEM 2016","text":"<ul> <li>RDO Community Day</li> </ul>"},{"location":"community/rdo-videos/#openstack-summit-atlanta","title":"OpenStack Summit Atlanta","text":"<ul> <li>OpenStack Summit Atlanta presentations</li> </ul>"},{"location":"community/rdo-videos/#openstack-networking-part-ii","title":"OpenStack Networking Part II","text":""},{"location":"community/rdo-videos/#openstack-networking-for-dummies","title":"OpenStack Networking for Dummies","text":""},{"location":"community/rdo-videos/#introducing-rdo","title":"Introducing RDO","text":""},{"location":"community/rdo-videos/#installing-openstack-with-packstack-and-rdo","title":"Installing OpenStack with PackStack and RDO","text":""},{"location":"community/rdo-videos/#automating-openstack-with-red-hat-puppet","title":"Automating OpenStack with Red Hat &amp; Puppet","text":""},{"location":"community/rdo-videos/#heat-openstack-and-red-hat","title":"Heat, OpenStack and Red Hat","text":"<ul> <li>Interview with Steve Hardy at Open World Forum 2013.</li> </ul>"},{"location":"contribute/","title":"Contribute to RDO","text":"<p>If you are interested in contribute to RDO project, here you can find all documentation related to this process.</p> <p>Our community strives to operate according to the terms of the OpenStack Code of Conduct.</p> <p>If you're just getting started, and are looking for a little help, consult our mentors list.</p>"},{"location":"contribute/#packager","title":"Packager","text":"<ul> <li>Review RDO patches</li> <li>Become an RDO package maintainer</li> <li>Get to know RDO Packaging documentation</li> <li>Get started now!</li> </ul>"},{"location":"contribute/#tester","title":"Tester","text":"<ul> <li>Review open bugs</li> <li>File bugs</li> </ul>"},{"location":"contribute/add-packages/","title":"Adding new packages to RDO","text":""},{"location":"contribute/add-packages/#how-to-add-a-new-openstack-package-to-rdo-trunk","title":"How to add a new OpenStack package to RDO Trunk","text":"<p>When a new package is required in RDO, it must be added to RDO Trunk packaging. To include new packages, following steps are required:</p> <ol> <li> <p>Create a \"Package Review\" story in RDO Jira board. You can clone the new package template story. Make sure you replace the title with the actual package name, and provide the reason and upstream code repository in the description. The story should be assigned to the Epic \"RDO release name\" and \"Fix Version/s\" field is also assigned to the desired RDO release. Once the issue has been created, and an initial license check has been conducted, you can continue with steps 2 and 3.</p> </li> <li> <p>Send a review adding the new project in rdo.yml to the rdoinfo project in review.rdoproject.org. In this change you must provide the project information and Package Review Jira story ticket in the commit message (see this example). Add the project definition in rdo.yml file and <code>under-review</code> tag in tags/under-review.yml file, as for example:</p> <pre><code># in rdo.yml\n- project: octavia-lib\n  conf: rpmfactory-lib\n  maintainers:\n  - nmagnezi@redhat.com\n  - cgoncalves@redhat.com\n  - bcafarel@redhat.com\n\n# in tags/under-review.yml\n- project: octavia-lib\n  tags:\n    under-review:\n</code></pre> <p>Note: Maintainers must be registered in review.rdoproject.org and use the registered email in the rdoinfo review. This is required to set your permissions on your project.</p> <p>Once the patch is merged, following tasks are done by RDO automation process:-</p> <ul> <li>Patch is proposed to create project and assign permissions to maintainers to manage the project. (as in this example)</li> <li>Once the create project patch is merged, required projects will be created in https://review.rdoproject.org with repo synched to github.com.</li> <li>Patch is proposed to add new projects to rdo zuul configuration in review.rdoproject.org.</li> <li>Patch is proposed to add check jobs to new projects in rdoproject.org. (as in this example). CI jobs in this patch will fail until the Patch to add new projects to rdo zuul configuration is merged.</li> </ul> </li> <li> <p>Create a new review to the new distgit project with the needed content (spec file, etc...) for the initial import as in this example. This will trigger a CI job to test the package build. The spec will be reviewed by the core RDO packagers, and cannot be approved by the requester.</p> </li> <li> <p>Once the initial spec is considered ready to merge by the reviewers, go back to the Package Review Story and update it with the final spec and SRPM. Then, the formal package review will be conducted by the reviewer using fedora-review. Only after the fedora-review output is added as a comment in the story, the initial spec review will be approved in Gerrit.</p> </li> <li> <p>Finally, send a new review to rdoinfo project to remove the <code>under-review</code> tag from <code>tags/under-review.yml</code> file and add tags for which package needs to be build, For current release Train, 2 files need to be updated(<code>tags/train.yml</code>, <code>tags/train-uc.yml</code>) (example). This change can be sent before merging review in step 3 if a <code>Depends-On: &lt;gerrit-change-id step 3&gt;</code> is added.</p> </li> </ol> <p>Once the change is merged in rdoinfo, a new package should be automatically built and published in the RDO Trunk repos.</p> <p>In order to track all review requests related to a new package process, it's recommended to use the same topic (as <code>add-octavia-lib</code> in the above examples) for all these reviews.</p> <p>RDO project is working to automate as much as possible this process. If you need help to add new packages, you can ask on <code>#rdo</code> or <code>rdo-list</code> mailing list.</p> <p></p>"},{"location":"contribute/add-packages/#how-to-add-a-new-puppet-module-to-rdo-trunk","title":"How to add a new puppet module to RDO Trunk","text":"<p>Adding a new puppet module to RDO Trunk is done using the same process as adding a new package to RDO Trunk with a few small differences. Use the following steps referencing the above How to add a new package to RDO Trunk for details on submitting a new puppet module. The steps here correspond to the steps above offering details specific to puppet modules.</p> <ol> <li> <p>Submit the Package Review, instead of including a spec file reference that the spec file will be generated.</p> </li> <li> <p>Send a review to rdoinfo according to the package requirements. The under-review tag is still required. Use this as example content:</p> <pre><code># in rdo.yml\n- project: puppet-congress\n  conf: rpmfactory-puppet\n\n# in tags/under-review.yml\n- project: puppet-congress\n  tags:\n    under-review:\n</code></pre> </li> <li> <p>Generate the spec file to submit to the new distgit project using this script</p> </li> <li> <p>Process is the same as standard packages</p> </li> </ol>"},{"location":"contribute/get_packages_ready/","title":"New OpenStack release","text":""},{"location":"contribute/get_packages_ready/#getting-packages-ready-for-new-openstack-releases","title":"Getting packages ready for new OpenStack releases","text":"<p>When a new OpenStack release is delivered upstream, there is a set of steps that must be performed in RDO to build and publish new packages both in RDO CloudSIG and RDO Trunk repos.</p>"},{"location":"contribute/get_packages_ready/#1-rdo-infrastructure-preparation","title":"1. RDO infrastructure preparation","text":"<p>Some weeks before a new OpenStack release is published, some changes in RDO tools and infrastructure are needed to get the delivery pipeline ready. These tasks are mostly done by RDO core members, for example:</p> <ul> <li>Adding a new DLRN builder following stable/ branch. <li>Creating CI jobs for new branches.</li> <li>Including new release in automation bots.</li> <li>etc...</li> <p>Once these tasks are done, it will be announced in rdo mailing lists so that package maintainers can start carrying out the next steps.</p>"},{"location":"contribute/get_packages_ready/#2-update-package-distgits","title":"2. Update package distgits.","text":"<p>Around RC1 time (check upstream schedule), package maintainers should send required reviews to rpm-master branch to adjust distgits contents to the changes occurred during the cycle. This typically includes updating minimal versions for existing dependencies, removing not longer used requirements, etc... Note that <code>rdopkg reqcheck</code> command can be used to check changes in dependencies.</p>"},{"location":"contribute/get_packages_ready/#3-create-new-branch-release-rdo-in-distgits","title":"3. Create new branch &lt;release&gt;-rdo in distgits.","text":"<p>Once the distgits content is ready for the new release, package maintainers must request a new branch &lt;release&gt;-rdo for their packages. This can be done by sending a review to the corresponding package resource in gerrit configuration following next steps:</p> <ol> <li> <p>Clone config project:</p> <pre><code>git clone https://review.rdoproject.org/r/config\n</code></pre> </li> <li> <p>RDO gerrit config project contains a resource file for each managed package. Look for the one containing the package where the new branch is needed:</p> <pre><code>cd config/resources\ngrep &lt;project name&gt;-distgit *\n</code></pre> <p>i.e.:</p> <pre><code>$ grep novaclient-distgit *\nopenstack-novaclient.yaml:    openstack-novaclient-distgit:\nopenstack-novaclient.yaml:    openstack/novaclient-distgit:\nopenstack-novaclient.yaml:      acl: openstack-novaclient-distgit\n</code></pre> </li> <li> <p>Edit the yaml file. Look for &lt;project name&gt;-distgit under <code>repos</code> section. If it doesn't have a <code>branches</code> sub-section, add it. Inside branches add a new line with the branch name:</p> <pre><code>&lt;release&gt;-rdo: &lt;commit id for last commit in rpm-master in the project distgit&gt;\n</code></pre> <p>The commit id of the last commit in the project distgit must be specified as it will be used as starting point for the new branch. For example:</p> <pre><code>repos:\n  openstack/novaclient:\n    acl: openstack-novaclient\n    description: Mirror of upstream novaclient (mirror + patches)\n  openstack/novaclient-distgit:\n    acl: openstack-novaclient-distgit\n    description: Packaging of upstream novaclient\n    branches:\n      pike-rdo: 71fafbb21c2dc8dd518a0c3d5f635b6b04100661\n      queens-rdo: c2e115b3283fd776cabaf68d0eb7940030fc1821\n      rocky-rdo: c0663f17adf0bc05999d8b2caabbe9270af93c27\n      stein-rdo: 9d0b15be17c3aaf39dccd5a0ab8fe01801d6484d\n</code></pre> </li> <li> <p>Commit the change and send the review using commands:</p> <pre><code>git commit -a -m \"Create new branch &lt;release&gt;-rdo\"\ngit review\n</code></pre> <p>An example of a new branch request can be found here</p> </li> </ol>"},{"location":"contribute/get_packages_ready/#4-request-new-builds-for-cloudsig-repos","title":"4. Request new builds for CloudSIG repos.","text":"<p>After new branches are created in distgits and upstream projects have pushed tags for new RC or final releases (depending on the release model adopted for each upstream project), new builds are created using Centos Build System by sending a review to the &lt;release&gt;-rdo branch as shown in this doc. Note that RDO uses a bot to propose reviews for new releases automatically in most cases, however it's recomended that package maintainers pay some attention on this process and send a review if reviews have not been created on time.</p>"},{"location":"contribute/get_packages_ready/#5-pin-branchless-projects-in-rdoinfo","title":"5. Pin branchless projects in rdoinfo.","text":"<p>According to stable policies, RDO Trunk repos shouldn't follow master branch after GA. By default, DLRN builders are configured to use stable/&lt;release&gt; branches for non-master releases. However, some projects packaged in RDO don't create stable branches upstream or use different ones. For example, some independent projects create a branch for each supported major package version instead of OpenStack release. For those cases, packages should be pinned to a specific git tag, commit or branch. This is done by sending a review to rdoinfo project <code>using source-branch</code> parameter for the release tag as in this example.</p>"},{"location":"contribute/how-to-fix-a-ftbfs-using-dlrn/","title":"How to fix a FTBFS using DLRN","text":"<p>DLRN is the tool used by the RDO project to build RPM packages for every commit from the OpenStack projects. See article for more details on how DLRN works. These commits from the upstream OpenStack projects can introduce changes that break the packaging. We call these FTBFS (Failure To Build From Source). When we have a FTBFS reported by DLRN, someone needs to take care of fixing it. You can see these using gerrit at https://review.rdoproject.org/#/q/topic:rdo-FTBFS. We\u2019ll work on an example reported on the horizon package in https://review.rdoproject.org/r/#/c/1131/1/. Here are the steps to propose a correction:</p> <pre><code>First you need to install DLRN:\ngit clone [https://github.com/openstack-packages/DLRN.git](https://github.com/openstack-packages/DLRN.git)\ncd DLRN\ntox\n. .tox/py27/bin/activate\n</code></pre> <p>Then let DLRN build the horizon project to be sure we reproduce the build issue locally: dlrn --config projects.ini --package-name horizon --dev --head-only</p> <p>Keep in mind that the default projects.ini file will try to create a package for the master branch using CentOS7 as a target. If the failure happens in a different branch, such as stable/mitaka, you will need to adjust the file as needed. The dist-git repository is stored under data/_distro so extract the gerrit review in this directory:</p> <pre><code>cd data/horizon_distro\ngit review -s\ngit review -d 1131\n</code></pre> <p>Edit the spec file to fix the problem. Remember to remove the last line in the spec file, it was created by the dummy review. Here in this case, we just needed to remove files not distributed anymore and then archive the change in git resetting the author to take the ownership of the review:</p> <pre><code>git commit --amend -a --reset-author\ncd ../..\n</code></pre> <p>To test your change use the same build command as before with the addition of \u2013local to use your modifications:</p> <pre><code>dlrn --config projects.ini --package-name horizon --dev --head-only --local\n</code></pre> <p>If everything is fine, just submit the change using the rdo-FTBFS topic:</p> <pre><code>cd data/horizon_distro\ngit review -t rdo-FTBFS\n</code></pre> <p>Then you\u2019ll need to have the review accepted by a core reviewer. In our example, here is the proposed changeset to fix the problem: https://review.rdoproject.org/r/#/c/1131/2/</p>"},{"location":"contribute/intro-packaging/","title":"RDO OpenStack Packaging","text":""},{"location":"contribute/intro-packaging/#packaging-overview","title":"Packaging overview","text":"<p>RDO produces two set of packages repositories:</p> <ul> <li> <p>RDO CloudSIG repositories provide packages of upstream point releases created through a controlled process using CentOS Community Build System. This is kind of \"stable RDO\".</p> </li> <li> <p>RDO Trunk repositories provide packages of latest upstream code without any additional patches. New packages are created on each commit merged on upstream OpenStack projects.</p> </li> </ul> <p>Following diagram shows the global packaging process in RDO.</p> <p></p> <p></p>"},{"location":"contribute/intro-packaging/#distgit-where-the-spec-file-lives","title":"distgit - where the .spec file lives","text":"<p>distgit is a git repository which contains <code>.spec</code> file used for building a RPM package. It also contains other files needed for building source RPM such as patches to apply, init scripts etc.</p> <p>RDO packages' distgit repos are hosted on review.rdoproject.org and follow <code>$PROJECT-distgit</code> naming. You can navigate the full list of distgit repos using this link.</p> <p>You can use rdopkg to clone a RDO package <code>distgit</code> and also setup related remotes:</p> <pre><code>$&gt; rdopkg clone openstack-nova\nCloning distgit into ./openstack-nova/\ngit clone http://review.rdoproject.org/r/p/openstack/nova-distgit.git openstack-nova\n...\n</code></pre> <p>Inspect package history using <code>git</code>:</p> <pre><code>$&gt; cd openstack-nova\n$&gt; git checkout mitaka-rdo\n$&gt; git log --oneline\nded74f2 Add privsep-helper to nova sudoers file\n55981cf Add python-microversion-parse dependency\n39d576a Update .gitreview\n4e53ad0 Add missing python-cryptography BuildRequires\n</code></pre> <p>See what <code>rdopkg</code> thinks about current distgit:</p> <pre><code>$&gt; rdopkg pkgenv\n\nPackage:   openstack-nova\nVersion:   13.0.0\nUpstream:  13.0.0\nTag style: X.Y.Z\n\nPatches style:          review\nDist-git branch:        mitaka-rdo\nLocal patches branch:   mitaka-patches\nRemote patches branch:  patches/mitaka-patches\nRemote upstream branch: upstream/master\nPatches chain:          http://review.rdoproject.org/r/631\n</code></pre> <p>Submit distgit changes for review:</p> <pre><code>$&gt; rdopkg review-spec\n</code></pre> <p></p>"},{"location":"contribute/intro-packaging/#branches-in-distgits","title":"Branches in distgits","text":"<p>Because of the different build tools used for RDO CloudSIG and Trunk repos and the differences in dependencies and content in packages for each OpenStack release, RDO maintains several branches in distgits:</p> <ul> <li>rpm-&lt;release&gt;: is used to package RDO trunk (version can be master,   mitaka or liberty )</li> <li>&lt;release&gt;-rdo: is used for RDO CloudSIG.</li> </ul> <p>There are a number of expected differences between the spec files in rpm-&lt;release&gt; and &lt;release&gt;-rdo branches:</p> <ul> <li> <p>For RDO trunk, packaging has had <code>Version:</code> and <code>Release:</code> fields   both set to <code>XXX</code> as <code>dlrn</code> takes both of   these from the tags set on the git repositories. For &lt;release&gt;-rdo branches   they must be manually set to the right version and release.</p> </li> <li> <p>%changelog section is empty in rpm-&lt;release&gt;.</p> </li> <li> <p>Because we are packaging vanilla upstream code, patches aren't backported into the RDO Trunk repositories.</p> </li> <li> <p>All of the specs in rpm-&lt;release&gt; branches contain a reference to <code>%{upstream_version}</code>   in the <code>%setup macro</code>, this is because the subdirectory contained in   the source tarball contains both the version and release, this is   being passed into <code>rpmbuild</code>. In the Fedora packaging, spec can   include compatibility macro e.g. Nova   to avoid conflicts when backporting change from master packaging.</p> </li> <li> <p>The files <code>sources</code> and <code>.gitignore</code> have been truncated in the   master packaging</p> </li> <li> <p>In <code>%files</code> avoid using <code>%{version}</code> and use instead wildcard <code>*</code></p> </li> </ul>"},{"location":"contribute/intro-packaging/#rpm-master-and-rpm-master-head-branches","title":"rpm-master and rpm-master-head branches","text":"<p>As previously stated, the <code>rpm-master</code> branch is used to package RDO Trunk using the master source branch. However, There are two RDO Trunk builder building packages from that branch:</p> <ul> <li> <p>The main builder, which pins libraries and clients to the versions included   in upper-constraints.</p> </li> <li> <p>The master-head, that chases master in all packages, including libraries, clients, etc.</p> </li> </ul> <p>Initially, both builders use the <code>rpm-master</code> distgit branch. However, we may find an issue for a client or library in <code>master-head</code> that does not show up on the <code>main</code> builder yet. In those cases, we will create a temporary distgit branch called <code>rpm-master-head</code>, where the fix will be merged.</p> <p>Having this temporary <code>rpm-master-head</code> branch will allow us to fix the build for the package, and once the change in the master repo reaches a tagged release used by the <code>main</code> builder, we can simply cherry-pick the change and remove the temporary branch.</p>"},{"location":"contribute/intro-packaging/#patches-branch","title":"Patches branch","text":"<p>Because we rebase often in RDO CloudSIG repos, manual management of patch files in distgit would be unbearable. That's why each distgit branch has an associated patches branch which contains upstream git tree with extra downstream patches on top.</p> <p>A distgit can be automatically updated by <code>rdopkg</code> to include patches from associated patches branch and thus RPM patches are managed with <code>git</code>.</p> <p>Individual RDO patches are maintained in form of gerrit reviews on review.rdoproject.org.</p> <p></p>"},{"location":"contribute/intro-packaging/#rdopkg","title":"rdopkg","text":"<p>rdopkg is a command line tool that automates many operations on RDO packages including:</p> <ul> <li>cloning package distgit and setting up remotes</li> <li>introducing patches</li> <li>rebases to new versions</li> <li>sending changes for review</li> <li>querying <code>rdoinfo</code> metadata</li> <li>modifying .spec file: bumping versions, managing patches, writing    changelog, producing meaningful commit messages, ...</li> </ul> <p><code>rdopkg</code> is a Swiss army knife of RDO packaging and it automates a number of repetitive and error prone processes involving several underlying tools, each with its own quirks.</p> <p>Install <code>rdopkg</code> from Fedora/EPEL repos:</p> <pre><code>$&gt; dnf install rdopkg\n</code></pre> <p><code>rdopkg</code> source lives at softwarefactory-project.io but it's also mirrored to github.</p> <p>Bugs are tracked as github issues.</p> <p>Poke <code>jruzicka</code> on <code>#rdo</code> for help/hate/suggestions about <code>rdopkg</code>.</p> <p>See also man rdopkg.</p> <p></p>"},{"location":"contribute/intro-packaging/#rdoinfo-metadata","title":"rdoinfo metadata","text":"<p><code>rdoinfo</code> is a git repository containing RDO packaging metadata such as releases, packages, maintainers and more.</p> <p><code>rdoinfo</code> lives at review.rdoproject.org and is also mirrored to github.</p> <p>Most of the metadata is stored in <code>rdo.yml</code> and <code>deps.yml</code>, <code>tags</code> and <code>buildsys-tags</code> are stored in multiple YAML files as described below:</p> <ul> <li>rdo.yml</li> <li>deps.yml</li> <li>tags/\\&lt;tag&gt;.yml</li> <li>buildsys-tags/cloud7-openstack-\\&lt;release&gt;-\\&lt;phase&gt;.yml</li> </ul> <p>The files under <code>tags</code> and <code>buildsys-tags</code> directories are named based on names of tags and buildsys-tags, this is defined as follows:-</p> <ul> <li>release: is a the OpenStack release name, as queens, rocky or stein.</li> <li>tag: tag for which project is build, like queens, rocky, stein, train, train-uc, etc.</li> <li>phase:</li> <li><code>candidate</code> phase is assigned to packages to be rebuilt in   CBS but not pushed to any RDO repository.</li> <li><code>el7-build</code> (only available for Rocky and newer releases)   is assigned to packages that only required to build other   packages but are not a runtime requirement for any other package.</li> <li><code>testing</code> phase means that the package is used in deployments using RDO Trunk   repo and published in a testing repo, but not official CloudSIG repository.</li> <li><code>release</code> phase means that is published in the official CloudSIG repository.   This phase is only available after a RDO version has been officially released   not for the one currently under development.</li> </ul> <p>To query <code>rdoinfo</code>, use <code>rdopkg info</code>:</p> <pre><code>$&gt; rdopkg info\n$&gt; rdopkg info openstack-nova\n$&gt; rdopkg info maintainers:jruzicka@redhat.com\n</code></pre> <p>To integrate <code>rdoinfo</code> in your software, use <code>rdopkg.actionmods.rdoinfo</code> module.</p>"},{"location":"contribute/intro-packaging/#dlrn","title":"DLRN","text":"<p>DLRN is a tool used to build RPM packages on each commit merged in a set of configurable git repositories. DLRN uses rdoinfo to retrieve the metadata and repositories associated with each project in RDO (code and distgit) and mock to carry out the actual build in an isolated environment.</p> <p>DLRN is used to build the packages in RDO Trunk repositories that are available from http://trunk.rdoproject.org.</p> <p>NVR for packages generated by DLRN follows some rules:</p> <ul> <li>Version is set to MAJOR.MINOR.PATCH of the next upstream version.</li> <li>Release is 0.&lt;timestamp&gt;.&lt;short commit hash&gt;</li> </ul> <p>For example <code>openstack-neutron-8.1.1-0.20160531171125.ddfe09c.el7.centos.noarch.rpm</code>.</p>"},{"location":"contribute/intro-packaging/#rdo-trunk-packaging-guide","title":"RDO Trunk Packaging Guide","text":"<p>In RDO Trunk packages are built automatically by DLRN from <code>.spec</code> templates residing in <code>rpm-master</code> and <code>rpm-$RELEASE</code> distgits.</p> <p>In order to build an <code>RPM</code> with the master packaging you'll need to install DLRN, following the instructions described in this README.</p>"},{"location":"contribute/intro-packaging/#run-dlrn","title":"Run DLRN","text":"<p>Once DLRN is installed, run <code>dlrn</code> for the package you are trying to build.</p> <pre><code>$&gt; dlrn --config-file projects.ini --local --package-name openstack-cinder\n</code></pre> <p>This will clone the distgit for the project you're interested in into <code>data/openstack-cinder_distro</code>, you can now change this packaging and rerun the <code>dlrn</code> command in test your changes.</p> <p>If you have locally changed the packaging make sure to include <code>--dev</code> in the command line. This switches <code>dlrn</code> into \"dev mode\" which causes it to preserve local changes to your packaging between runs so you can iterate on spec changes. It will also cause the most current public master repository to be installed in your build image(as some of its contents will be needed for dependencies) so that the packager doesn't have to build the entire set of packages.</p> <p>The output from <code>dlrn</code> is a repository containing the packages you just built along with the most recent successfully built version of each package. To find the most recent repository follow the symbolic link <code>./data/repos/current</code></p>"},{"location":"contribute/intro-packaging/#submitting-distgit-changes-to-gerrit","title":"Submitting distgit changes to gerrit","text":"<p>When modifying spec files for RDO Trunk keep in mind the considerations shown in Branches in distgits and follow the recommendations in the RDO Packaging Guidelines. Once you are happy that you have your changes in distgit ready to be reviewed, create a <code>git commit</code> with an appropriate comment, add a <code>git remote</code> pointing to gerrit and then submit your patch</p> <pre><code>$&gt; git review -s\n$&gt; git commit -p\n$&gt; git review rpm-master\n</code></pre>"},{"location":"contribute/intro-packaging/#browsing-gerrit-for-reviews","title":"Browsing gerrit for reviews","text":"<p>To look at all open patches for the upstream packaging simply use the this link and look for your desired project, for example <code>openstack/cinder-distgit</code>.</p>"},{"location":"contribute/intro-packaging/#rdo-cloudsig-packaging-guide","title":"RDO CloudSIG Packaging Guide","text":"<p>Packaging files for CloudSIG repos live in <code>$RELEASE-rdo</code> branches of distgit. Patches can be introduced as needed through associated patches branch.</p>"},{"location":"contribute/intro-packaging/#initial-repository-setup","title":"Initial repository setup","text":"<p><code>rdopkg clone</code> takes care of getting the package distgit and also setting up all relevant git remotes defined in rdoinfo. Use <code>-u</code>/<code>--review-user</code> option to specify your github username if it differs from <code>$USER</code>.</p> <pre><code>$&gt; rdopkg clone openstack-nova -u github-username\nCloning distgit into ./openstack-nova/\ngit clone http://review.rdoproject.org/r/p/openstack/nova-distgit.git openstack-nova\nAdding patches remote...\ngit remote add patches http://review.rdoproject.org/r/p/openstack/nova.git\nAdding upstream remote...\ngit remote add upstream git://git.openstack.org/openstack/nova\n...\n</code></pre> <p>Check output of <code>rdopkg pkgenv</code> to see what <code>rdopkg</code> thinks about your package:</p> <pre><code>$&gt; cd openstack-nova\n$&gt; git checkout mitaka-rdo\n$&gt; rdopkg pkgenv\n</code></pre>"},{"location":"contribute/intro-packaging/#simple-spec-fix","title":"Simple <code>.spec</code> fix","text":"<p>The simplest kind of change that doesn't introduce/remove patches or different source tarball.</p> <ul> <li>Make required changes.</li> <li>Bump <code>Release</code>.</li> <li>Provide useful <code>%changelog</code> entry describing your change.</li> <li>Commit the distgit changes with meaningful commit message.</li> <li>Send the change for review.</li> </ul> <p>Although this change is simple, <code>rdopkg fix</code> can still make some string manipulation for you. In following example, I add a new dependency to <code>nova</code> package:</p> <pre><code>$&gt; cd openstack-nova\n$&gt; git checkout mitaka-rdo\n$&gt; rdopkg fix\n\nAction required: Edit .spec file as needed and describe changes in changelog.\n\nOnce done, run `rdopkg -c` to continue.\n\n$&gt; vim openstack-nova.spec\n# Add Requires line and describe the change in %changelog\n$&gt; rdopkg -c\n</code></pre> <p>After this, <code>rdopkg</code> generates new commit from the %changelog entry you provided and displays the diff:</p> <pre><code>    Epoch:            1\n    Version:          13.0.0\n   -Release:          1%{?dist}\n   +Release:          2%{?dist}\n    Summary:          OpenStack Compute (nova)\n\n    ...\n\n    Requires:         bridge-utils\n    Requires:         sg3_utils\n    Requires:         sysfsutils\n   +Requires:         banana\n\n    %description compute\n    OpenStack Compute (codename Nova) is open source software designed to\n\n    ...\n\n    %changelog\n   +* Mon May 09 2016 Jakub Ruzicka &lt;jruzicka@redhat.com&gt; 1:13.0.0-2\n   +- Require banana package for the lulz\n   +\n    * Thu Apr  7 2016 Ha\u00efkel Gu\u00e9mar &lt;hguemar@fedoraproject.org&gt; - 1:13.0.0-1\n    - Upstream 13.0.0\n</code></pre> <p>Finally, send the changes for review:</p> <pre><code>$&gt; rdopkg review-spec\n</code></pre>"},{"location":"contribute/intro-packaging/#introducingremoving-patches","title":"Introducing/removing patches","text":"<p>See patches branch for introduction.</p> <p>Following schema shows the workflow to maintain patches applied in the packaging process.</p> <pre><code>     +------------------------+\n     |        upstream        |\n     |  github.com/openstack  |\n     +------------------------+\n                 |\n git cherry-pick | rdopkg review-patch\n                 V\n     +-------------------------+\n     |      patches branch     |\n     |  review.rdoproject.org  |\n     +-------------------------+\n                 |\n    rdopkg patch | rdopkg review-spec\n                 V\n     +-------------------------+\n     |        distgit          |\n     |  review.rdoproject.org  |\n     +-------------------------+\n</code></pre> <p>First, use <code>rdopkg get-patches</code> to get a patches branch associated with current distgit, cherry pick your patch(es) on top, and send them for review with <code>rdopkg review-patch</code>:</p> <pre><code>$&gt; git checkout mitaka-rdo\n$&gt; rdopkg get-patches\n$&gt; git cherry-pick YOUR_PATCH\n$&gt; rdopkg review-patch\n</code></pre> <p>Once the patch gets approved (not merged), you can tell <code>rdopkg</code> to update the distgit and send the <code>.spec</code> change for review:</p> <pre><code>$&gt; git checkout mitaka-rdo\n$&gt; rdopkg patch\n$&gt; rdopkg review-spec\n</code></pre> <p>For more specific example, please see Introducing patches to RDO CloudSIG packages RDO blog post.</p>"},{"location":"contribute/intro-packaging/#rebasing-on-new-version","title":"Rebasing on new version","text":"<p>tl;dr <code>rdopkg new-version</code> should take care of that:</p> <pre><code>$&gt; git checkout mitaka-rdo\n$&gt; rdopkg new-version\n</code></pre> <p>or <code>rdopkg new-version 1.2.3</code> to select specific version.</p> <p>Inspect resulting distgit commit and if you need to adjust anything, use <code>rdopkg amend</code> to amend and regenerate commit message from changelog.</p> <p>Finally, once happy with your change submit it for review with</p> <pre><code>$&gt; rdopkg review-spec\n</code></pre>"},{"location":"contribute/mentors.html/","title":"RDO Mentors","text":"<p>It can sometimes be a little intimidating when you first start contributing to OpenStack. Most of the RDO related tickets are in the Jira and have a designated asignee, you may also wish to find a mentor based on the area that you're interested in working on.</p> <p>Or, when you arrive on IRC, and ask a question and are greeted with silence, it can be very useful to know who to ping to get their attention.</p> <p>The following people have indicated that they're willing to mentor you through your first contributions, or answer your questions on particular topics on IRC. Please don't hesitate to ask. (And, if you're willing to be on the list, please add your name and/or IRC nick below.)</p> <p>Finally, if you want to contribute to the upstream OpenStack community, there's a similar list called the OpenStack Upstream Institute.</p>"},{"location":"contribute/mentors.html/#who-to-ask","title":"Who to ask","text":""},{"location":"contribute/mentors.html/#general","title":"General","text":"<ul> <li>Alfredo Moralejo \u2013 amoralej</li> <li>Alan Pevec \u2013 apevec</li> <li>Amy Marrich \u2013 spotz</li> <li>Joel Capitao \u2013 jcapitao</li> <li>Jon Schlueter \u2013 jschlueter/yazug</li> <li>Karolina Kula \u2013 kkula</li> </ul>"},{"location":"contribute/mentors.html/#installation","title":"Installation","text":"<ul> <li>Alfredo Moralejo \u2013 amoralej</li> <li>Joel Capitao \u2013 jcapitao</li> <li>Amy Marrich \u2013 spotz</li> </ul>"},{"location":"contribute/mentors.html/#packaging","title":"Packaging","text":"<ul> <li>Alfredo Moralejo \u2013 amoralej</li> <li>Joel Capitao \u2013 jcapitao</li> <li>Karolina Kula \u2013 kkula</li> </ul>"},{"location":"contribute/mentors.html/#infrastructure","title":"Infrastructure","text":"<ul> <li>Alfredo Moralejo \u2013 amoralej</li> <li>Joel Capitao \u2013 jcapitao</li> </ul>"},{"location":"contribute/mentors.html/#documentation","title":"Documentation","text":"<ul> <li>Amy Marrich \u2013 spotz</li> </ul>"},{"location":"contribute/mentors.html/#where-to-ask","title":"Where to ask","text":"<p>Conversations about RDO happen a number of different places on IRC. For a full list of IRC channels related to RDO, see the IRC section in Contribute to RDO.</p>"},{"location":"contribute/new_release_guide/","title":"Step by step RDO release guide","text":"<p>Creating a new release in RDO is a complex process with multiple dependencies. This overview provides users and contributors information on what leads up to a release and what detailed steps are to be performed before a new release. Not all steps are frozen in the sequence, but our experience shows that this is the most efficient way of working and some steps may be done in parallel.</p> <p>These steps follow the processes found in OpenStack releases - typically for the cycle-with-intermediary type of releasing - which is repeatable every 6 months. First there are provided non-client libraries, followed by client libraries, then services and lastly there are provided release-trailing deliverables.</p>"},{"location":"contribute/new_release_guide/#1-create-cbs-tags-for-next-release","title":"1. Create CBS tags for next release","text":"<p>At the very beginning, a new CBS tag for the next release should be created. This is needed before performing a switch to the new master. This operation is performed by creating a bug on pagure.io/centos-infra. An example can be found here.</p>"},{"location":"contribute/new_release_guide/#2-create-a-dlrn-builder-for-the-new-openstack-release-in-rdo-trunk-servers","title":"2. Create a DLRN builder for the new OpenStack release in RDO Trunk servers.","text":""},{"location":"contribute/new_release_guide/#prepare-new-dlrn-trunk-builder","title":"Prepare new DLRN trunk builder.","text":"<p>DLRN builder is an instance used to build RDO Trunk repos (follow articles about RDO Trunk repos and RDO CloudSIG repos). Before we start working on new packages, we have to set the builder. The first step is a change in rdo-infra/ansible-role-dlrn, where we define new repositories for the builder, as an example. The second step is to define the new builder in sf-infra. A patch to sf-infra will to depend on the previous one from ansible-role-dlrn.</p> <p>Before starting the building process, some steps have to be performed on the builder: 1. Create the database, users and tables 2. Set up authentication from trunk-centos8.rdoproject.org host to trunk.rdoproject.org 3. Synchronize deps</p>"},{"location":"contribute/new_release_guide/#bootstrapping","title":"Bootstrapping","text":"<p>Once the DLRN builder is ready, the bootstrap process can be started. This process is about building all DLRN packages in the proper sequence. Building is automated, but due to dependencies it may need to be restarted several times, and sometimes requires fixes in spec files.</p>"},{"location":"contribute/new_release_guide/#enable-usual-operations-for-the-new-dlrn-trunk-builder","title":"Enable usual operations for the new DLRN Trunk builder","text":"<p>The new builder, to be fully operated, needs to have enabled operations which were not possible before bootstrapping. Examples can be found in sf-infra and ansible-role-dlrn.</p> <p>This operation enables building new packages in the builders with any new commit in the projects (operated by cron), enables triggering automated gerrit reviews in case of FTBFS and sets the new builder visible on trunk.rdoproject.org website.</p>"},{"location":"contribute/new_release_guide/#enable-distgit-cbs-builds-for-next-release-branch","title":"Enable distgit CBS builds for next release branch","text":"<p>When reviews appear in the new release branch, appropriate jobs and builds have to be triggered.</p>"},{"location":"contribute/new_release_guide/#3-requirement-check-reqcheck","title":"3. Requirement check - reqcheck","text":"<p>Most of the projects we are packaging are constantly being developed on, so their requirements can change - added, removed, in the new version or constrained. This check is being done manually, using the rdopkg reqcheck tool. First libraries and client packages are rechecked, then the core packages (like openstack-nova).</p> <p>Even though the process seems to be not complicated, the appearing issues are often connected with missing dependencies. An example requirement check can be found here.</p>"},{"location":"contribute/new_release_guide/#4-build-libs-clients-and-core-projects-in-cloudsig-repos-on-cbs","title":"4. Build libs, clients and core projects in CloudSIG repos on CBS.","text":"<p>Once the requirement check is completes, the next step can be performed - building. To proceed with this, the new releases has to be created upstream. This step requires following steps:</p> <ol> <li>Cut rpm-master branch of distgit repo to create the \\&lt;release&gt;-rdo branch. This can be done with branching script from releng tooling, as an example, or manually by modifying config repo.</li> <li>Submit review with new version - a helpful script.</li> </ol>"},{"location":"contribute/new_release_guide/#5-pin-branch-and-build-non-openstack-puppet-modules-in-cloudsig-repos","title":"5. Pin, branch and build non-OpenStack puppet modules in CloudSIG repos","text":"<p>Non-OpenStack modules have to be pinned to the last promoted hash at branching time, since they don't follow the OpenStack lifecycle and RDO stable releases do not follow the master branches for them. The package has to be built based on the commit snapshot. This operation is done with the cooperation of the Puppet OpenStack team - these modules can be pinned after p-o-i team confirmation.</p> <ol> <li>Pin non OpenStack puppet modules, as example, using releng script.</li> <li>Cut branches, as in this review.</li> <li>Build, with releng script.</li> </ol>"},{"location":"contribute/new_release_guide/#6-move-master-rdo-trunk-to-next-release-tags","title":"6. Move master RDO Trunk to next release tags","text":"<p>Rdoinfo buildsys-tags and tags can be moved to the next-release after openstack/requirements is branched. As in review and review. This action has to be coordinated with the reviews mentioned in the \"Prepare new DLRN trunk builder\" section above.</p>"},{"location":"contribute/new_release_guide/#7-branch-openstack-puppet-modules-and-build-them-in-cloudsig-repos","title":"7. Branch OpenStack puppet modules and build them in CloudSIG repos","text":"<p>There is a bot which will automatically send the update reviews, when the tagged releases are created upstream. To trigger this step, we have to branch the distgit projects before the upstream p-o-i project creates the releases for the OpenStack puppet modules.</p>"},{"location":"contribute/new_release_guide/#8-pin-branch-and-build-tempest-and-tempest-plugins-in-cloudsig-repos","title":"8. Pin, branch and build tempest and tempest plugins in CloudSIG repos","text":"<p>Following steps are required to perform this operation:</p> <ol> <li>Branch and build the tempest package with bootstrap mode enabled, as here</li> <li>Disable the bootstrap mode without bumping release, to have other Openstack-tempest packages in RDO Trunk - example</li> <li>Cut branches, as in this review</li> <li>Pin tempest plugins in rdoinfo</li> <li>Review automatically created reviews</li> <li>Update version of tempest plugin project</li> </ol>"},{"location":"contribute/new_release_guide/#9-create-the-puppet-promotion-pipeline","title":"9. Create the puppet promotion pipeline","text":"<p>The Puppet promotion pipelines have to be defined as in patchset. Tests can be performed using testinfo. Newly defined jobs have to be assigned to the project - example.</p>"},{"location":"contribute/new_release_guide/#10-create-the-next-release-branch-for-dependencies","title":"10. Create the next release branch for dependencies","text":"<p>As development of dependencies is still ongoing, the new branch has to be prepared for featuring builds - as in this review.</p> <p>New branches have to be created in the upstream requirements repo to complete this task.</p>"},{"location":"contribute/new_release_guide/#11-add-support-of-the-new-release-in-ansible-role-weirdo-puppet-openstack","title":"11. Add support of the new release in ansible-role-weirdo-puppet-openstack","text":"<p>This is an example review of this operation.</p>"},{"location":"contribute/new_release_guide/#12-create-the-rdo-release-rpm","title":"12. Create the rdo-release RPM","text":"<p>Following step needs to be performed: 1. Create next release branch in distgit repo, as in example 2. Edit specification file 3. Trigger CBS build 4. Publish the RPM on repos.fedorapeople.org</p> <p>More details about used commands can be found in task description.</p>"},{"location":"contribute/new_release_guide/#13-create-weirdo-jobs-to-promote-to-release-tag","title":"13. Create weirdo jobs to promote to -release tag","text":"<p>The following jobs have to be defined in rdo-jobs repo. Such jobs will be triggered whenever promoting the package to -release tag.</p>"},{"location":"contribute/new_release_guide/#14-add-the-new-release-to-dashboards","title":"14. Add the new release to dashboards","text":"<p>Currently there are three dashboards to update with new release:</p> <ol> <li>rdo-dev dashboard</li> <li>Promotion dashboard</li> <li>FTBFS dashboard</li> </ol>"},{"location":"contribute/new_release_guide/#15-create-the-new-centos-release-openstack-","title":"15. Create the new centos-release-openstack- <p>To prepare for final release, the new release rpm has to be created  for CentOS CloudSIG in extras9s-extras-common-el9s, and later tagged in extras9s-extras-common-testing, -release, and finally build.</p>","text":""},{"location":"contribute/new_release_guide/#16-promote-ga-builds-to-testing-and-release","title":"16. Promote GA builds to -testing and -release <p>The final step to publish the next RDO release is performed by review as following one and another,  which can be done only after completing previous step.</p>","text":""},{"location":"contribute/new_release_guide/#17-enable-remaining-monitoring-on-grafana","title":"17.  Enable remaining monitoring on Grafana <p>Also monitoring, other than dashboards, should be activated for the new release: Prometheus and Grafana.</p>","text":""},{"location":"contribute/new_release_guide/#18-unpin-non-openstack-puppet-modules-and-tempest-plugins-in-master-release","title":"18. Unpin non OpenStack puppet modules and tempest plugins in master release <p>After the release, these projects can go back to active master. To do so, they have to be unpinned in rdoinfo.</p>","text":""},{"location":"contribute/onboarding/","title":"Let's Contribute to the RDO Project!","text":"<p>Welcome on board! As a new contributor there are some things you'll want to do to get ready:</p>"},{"location":"contribute/onboarding/#lets-get-prerequisites-ready","title":"Let's get prerequisites ready.","text":"<ul> <li>Join the RDO Mailing List</li> <li>Join the IRC channel <code>#rdo</code> on OFTC</li> <li>Create a GitHub account</li> <li>Sign up to <code>review.rdoproject.org</code></li> <li>Add an SSH key to <code>review.rdoproject.org</code></li> <li>Create a RDO Jira Board account</li> <li>Configure <code>git</code> and <code>git review</code></li> <li>Install the <code>rdopkg</code> tool</li> </ul>"},{"location":"contribute/onboarding/#whats-next","title":"What's Next!","text":"<ul> <li>Make your first contribution</li> <li>How to fix git Merge conflicts</li> <li>Review RDO patches</li> <li>Become an RDO package maintainer.</li> </ul>"},{"location":"contribute/onboarding/#join-the-rdo-mailing-list","title":"Join the RDO Mailing List","text":"<ul> <li>Go to RDO mailing list   and enter your email address and password and click on subscribe. Once   done, open your mailbox, you will get a confirmation email, click on the   verification link and you are subscribed to the RDO List.</li> <li>You can introduce yourself by sending a mail to the mailing list. Tell us   what your interests are and how you plan to participate.</li> </ul>"},{"location":"contribute/onboarding/#join-the-irc-channel-rdo-on-oftc","title":"Join the IRC channel <code>#rdo</code> on OFTC","text":"<ul> <li>All the development and communication related to the RDO Project happens on   the <code>#rdo</code> IRC channel on OFTC. Click this link   to join the channel and feel free to say Hello! We are always there to help.</li> <li>Feel free to check out the IRC etiquette   guide.</li> </ul>"},{"location":"contribute/onboarding/#create-a-github-account","title":"Create a GitHub account","text":"<p>Go to the GitHub Sign Up page and enter your username, email address, and password, and you are done. If you already have a GitHub account, you can skip this step.</p> <p></p>"},{"location":"contribute/onboarding/#sign-up-to-reviewrdoprojectorg","title":"Sign up to <code>review.rdoproject.org</code>","text":"<p>Sign-in to review.rdoproject.org using your GitHub account.</p> <p></p>"},{"location":"contribute/onboarding/#add-an-ssh-key-to-reviewrdoprojectorg","title":"Add an SSH key to <code>review.rdoproject.org</code>","text":"<ul> <li>Generate an SSH key, if you don't have one you already use. Follow these   instructions on Generating a new SSH key   if necessary.</li> <li>Then, go to ssh-key   and click on the \"Add Key\" button and copy the contents of <code>id_rsa.pub</code> (your   SSH public key) and paste it there, and then click on the 'Add' button and   you are done.</li> </ul>"},{"location":"contribute/onboarding/#create-a-rdo-jira-board-account","title":"Create a RDO Jira board account","text":"<p>All the bugs related to RDO packages are tracked on Red Hat Jira under the RDO project. OpenStack project bugs are tracked on Launchpad.</p> <ul> <li>You can create a RDO Board account by clicking on the \"Log In\" button on the   RDO Board page then following the   \"Register for a Red Hat account\" link.</li> </ul> <p></p>"},{"location":"contribute/onboarding/#configure-git-and-git-review","title":"Configure <code>git</code> and <code>git review</code>","text":"<ul> <li>Run these steps to let <code>git</code> know your email address:</li> </ul> <pre><code>$ git config --global user.name \"Firstname Lastname\"\n$ git config --global user.email \"your_email@youremail.com\"\n</code></pre> <ul> <li>To check your <code>git</code> configuration:</li> </ul> <pre><code>$ git config --list\n</code></pre> <ul> <li>Install the <code>git-review</code> tool</li> </ul> <p>RHEL-based systems (e.g. CentOS Steam 8+ with EPEL repo enabled)</p> <pre><code>$ sudo dnf install git-review\n</code></pre> <p>Fedora-based systems (after F24)</p> <pre><code>$ sudo dnf install git-review\n</code></pre> <p></p>"},{"location":"contribute/onboarding/#install-the-rdopkg-tool","title":"Install the <code>rdopkg</code> tool","text":"<p>Follow this link to install rdopkg, and you are set for making contributions to the RDO Project.</p> <p></p>"},{"location":"contribute/onboarding/#make-your-first-contribution","title":"Make your first contribution","text":"<ul> <li>The RDO Project has lots of easy fixes. Check out the   RDO easyfix page, pick   an issue, and feel free to move ahead.</li> <li>Feel free to familiarize yourself with RDO Packaging documentation.</li> <li>Clone the project.</li> </ul> <p>For example, cloning <code>keystone-distgit</code>, we need to pass the source code URL.</p> <pre><code>$ git clone https://review.rdoproject.org/r/openstack/keystone-distgit\n</code></pre> <p>You can also use <code>rdopkg</code> to clone an RDO package.</p> <pre><code>$ rdopkg clone package-name\n</code></pre> <ul> <li>Go inside the project directory, create, and checkout a new branch.   Note: Always create a new branch to work on any issue.</li> </ul> <pre><code>$ cd &lt;project_name&gt;\n$ git checkout -b &lt;issue name&gt;\n</code></pre> <ul> <li>Make changes in the code and add the changed files to git.</li> </ul> <pre><code>$ git add &lt;changed files&gt;\n</code></pre> <ul> <li>Commit the changes</li> </ul> <pre><code>$ git commit -m \"Add the commit message\"\n</code></pre> <p>You can check this link on how to write proper commit messages.</p> <ul> <li>If something went wrong in the commit message, or you need to adjust it, run   the following command:</li> </ul> <pre><code>$ git commit --amend\n</code></pre> <ul> <li>Now push the changes for review using <code>git-review</code>.</li> </ul> <pre><code>$ git review\n</code></pre> <p>Running <code>git review</code> will create an RDO Gerrit review link, and someone from RDO project will review the changes. Once everything looks fine, and is approved, your changes will get merged, and you'll have made your first contribution. Thanks!</p> <p></p>"},{"location":"contribute/onboarding/#how-to-fix-git-merge-conflicts","title":"How to fix git Merge conflicts?","text":"<p>You have submitted a patch and got merge conflict on your patch. You can check this link on how to resolving merge conflicts.</p> <p></p>"},{"location":"contribute/onboarding/#review-rdo-patches","title":"Review RDO patches","text":"<ul> <li>Reviewing other peoples patches is a good way to learn things.</li> <li>You can start getting familiar with RDO by reviewing patches in the   RDO Gerrit instance or by sending your   own patches for existing packages.</li> </ul> <p>"},{"location":"contribute/onboarding/#become-an-rdo-package-maintainer","title":"Become an RDO package maintainer","text":"<p>If you want to become a maintainer for one or more packages, you can request to be added to the core group for them by sending a review to rdoinfo as in this example.</p> <p>Being a maintainer for a package provides the ability to approve reviews for it (grants <code>+2</code> and <code>+W</code> in Gerrit terms).</p>"},{"location":"contribute/package-building-overview/","title":"Package building process \u2013 overview","text":"<p>In the RDO Project, we maintain two kinds of repos: RDO Trunk repositories and RDO CloudSIG repositories. RDO Trunk repositories have no-deps Openstack packages, which contain client, core, libs, puppet and tempest packages, while CloudSIG packages are a set of packages built by CentOS Community Build System. For Centos9 Stream master Trunk (DLRN) packages are stored in trunks and CloudSIG packages ends up in CentOS mirror.</p> <p>During the cycle of a given OpenStack release, we have the following recurring activities:</p> <ul> <li>New packages are created when needed.</li> <li>Each package is rebuilt anytime a new commit is available in the repository upstream on the RDO Trunk builder.</li> <li>If the package build fails, a review is automatically opened in our Gerrit review system, so the package maintainers can work on a fix.</li> <li>Periodically, the latest repository where all packages had been successfully built goes through a number of CI jobs. If all jobs are successful, the repository is promoted, meaning it is considered as good enough for other upstream CIs to rely on it for their jobs.</li> </ul>"},{"location":"contribute/package-building-overview/#what-is-dlrn","title":"What is DLRN?","text":"<p>In simplest words, DLRN is a tool which builds packages. In automated way DLRN is building package every time when new commit is merged in observed upstream repos, creating individual, separated environment basing on code, distgit and rdoinfo repo. DLRN can be also used to manually debug failing packages.</p>"},{"location":"contribute/package-building-overview/#ftbfs","title":"FTBFS","text":"<p>If build succeeds, package appears in trunk. If fails, automatic FTBFS (Fail To Build From Source) review is created in gerrit, providing building logs and information which commit caused FTBFS, like in example. All FTBFS\u2019 have to be reviewed and fixed. Current FTBFS can be easily spotted on RDO dashboard. Other way to check statuses of last builds is checking Latest Build Reports, for example for Centos 9 master.</p>"},{"location":"contribute/package-building-overview/#trunk-packages-branching-and-debugging","title":"Trunk packages \u2013 branching and debugging","text":"<p>Each trunk distgit has multiple branches. Under development one is rpm-master and the stable ones are named \\&lt;release&gt;-rdo. The rpm-master branch has <code>Version:</code> and <code>Release:</code> fields filled with XXX, which are automatically replaced with proper values during the DLRN building process. In \\-rdo branch, those values are filled while cutting the branch:  master -&gt; stable/\\&lt;release&gt; during the release process. Having such situation, a different procedure of bug/FTBFS reproduction is needed."},{"location":"contribute/package-building-overview/#debugging-with-dlrn","title":"Debugging with DLRN","text":"<p>Most reliable way to create a debugging or testing environment is Centos 9 container or vm usage. Steps to reproduce FTBFS:</p> <ol> <li>Clone DLRN repo:</li> </ol> <pre><code>        git clone https://github.com/softwarefactory-project/DLRN.git\n</code></pre> <ol> <li> <p>Follow setup procedure from README.</p> </li> <li> <p>Clone rdoinfo repository:</p> </li> </ol> <pre><code>        git clone \"https://review.rdoproject.org/r/rdoinfo\"\n</code></pre> <ol> <li>Edit <code>projects.ini</code> files with desired data. If you don\u2019t know how to reproduce a remote DLRN build, check logs from building in FTBFS review. Below you can see example of <code>projects.ini</code> preparation for Centos 9 master.</li> </ol> <pre><code>        sed -i 's%target=.*%target=centos9-stream%' projects.ini\n        sed -i 's%source=.*%source=master%' projects.ini\n        sed -i 's%baseurl=.*%baseurl=https://trunk.rdoproject.org/centos9/%' projects.ini\n        sed -i 's%tags=.*%tags=%' projects.ini\n</code></pre> <ol> <li>Run DLRN command (example package name):</li> </ol> <pre><code>        dlrn --head-only --dev --local --verbose-build --package-name openstack-tacker --info-repo ../rdoinfo\n</code></pre> <p>You can find more information and explanation of DLRN usage in the documentation.</p> <ol> <li> <p>Edit the package distgit or package code directly if needed. Both of them are now created inside DLRN directory, like data/openstack-tacker_distro for distgit and data/openstack-tacker for code.</p> </li> <li> <p>Run dlrn command once again. You should now be able to see reproduced error.</p> </li> </ol>"},{"location":"contribute/package-building-overview/#dependencies","title":"Dependencies","text":"<p>CloudSIG packages have different workflow of creating, maintaining and storing. They are finally placed in this repo. Describing CloudSIG packages, it is crucial to explain two packages building systems taking part in whole process. DLRN is for trunk packages, while for CloudSIG ones there are Koji and CBS. Whole package process building starts in Fedora. The packages exist in Fedora Package Sources repository, maintained by packagers an builded by Koji. If the package is needed in RDO project, it has to be rebuild for RDO. Process of building Fedora package for RDO using repo gating_script is well described in this document. Creating such review will effect with rebuilding package in CentOS Build System. On this level, there may occur some errors or misconfigurations, caused by different environment.</p>"},{"location":"contribute/package-building-overview/#debugging-package-building-failures","title":"Debugging package building failures","text":""},{"location":"contribute/package-building-overview/#logs","title":"Logs","text":"<p>After pushing your change to code review system, CI will trigger a bunch of tests on it and give results as vote or/and logs. If +1 is given by Zuul, everything went well. If -1 appears, it means that tests didn\u2019t pass, so debugging is needed.</p>"},{"location":"contribute/package-building-overview/#find-cbs-task-number-in-your-zuul-job-output","title":"Find CBS task number in your Zuul job output","text":"<p>First step is to check job logs. They are available after clicking on job name in Gerrit. Depending on which point of building failure happens, the true cause of it may be found in this job output or has to be found directly in CBS building job. In this example build failure reason can be found in Zuul job output, but in this one, the real reason has to be looked for in CBS logs, because Zuul jobs one doesn\u2019t provide anything useful. This is happening when the error doesn\u2019t refers to spec file, but the building process itself. The easiest way to find proper link to CBS build is to find \u201ctaskID\u201d word in job_output.txt, the result should looks like: Task console is: https://cbs.centos.org/koji/taskinfo?taskID=2800330. Note, that each job and each patchset has its own individual build number.</p>"},{"location":"contribute/package-building-overview/#how-to-read-cbs-build-logs","title":"How to read CBS build logs?","text":"<p>After going to the provided URL, general information about build will appear. The logs can be find by clicking on red hyperlink \u201cbuildArch\u201c. Provided output is placed in following files: * build.log * hw_info.log * mock_output.log * root.log * state.log</p> <p>If the error refers to dependencies, it will be placed in root.log. Also some errors may occur in other files, especially in build.log.</p>"},{"location":"contribute/package-building-overview/#common-package-building-issues","title":"Common package building issues","text":"<ul> <li>Missing dependency</li> </ul> <p>In a root.log file: DEBUG util.py:444: No matching package to install: 'python3dist(xxx)' DEBUG util.py:444: Not all dependencies satisfied</p> <p>Solution: The dependency is not tagged yet in our repo or not available. Contact RDO maintainers to discuss adding a new dependency.</p> <ul> <li> <p>SPEC file syntax error</p> </li> <li> <p>Infra issue (timeout)</p> </li> </ul> <p>Solution: If there are timeouts in refreshing repo metadata or other steps, it\u2019s good idea to recheck tests, by typing comment \u201crecheck\u201d in Gerrit review.</p> <ul> <li>failing <code>%check</code> phase Some unit tests failed during package building, like in example.</li> </ul> <p>Solution: Create testing environment and try to reproduce the error. Then, try to figure out and fix failing reason. It is possible to exclude failing test(s), but we only use that solution if it\u2019s strongly justified (like issue created in bugzilla or other bug tracker).</p> <ul> <li>missing macro</li> </ul> <p>in build.log file: RPM build errors: /var/tmp/rpm-tmp.s6H1EG: line 32: fg: no job control error: Bad exit status from /var/tmp/rpm-tmp.s6H1EG (%generate_buildrequires) Bad exit status from /var/tmp/rpm-tmp.s6H1EG (%generate_buildrequires) Child return code was: 1</p> <p>Solution:  add <code>BuildRequires: pyproject-rpm-macros</code> to build requirements.</p>"},{"location":"contribute/packager/","title":"RDO Package Maintainer Guide","text":""},{"location":"contribute/packager/#documents-for-packagers","title":"Documents for packagers","text":"<ul> <li>RDO Packager onboarding guide</li> <li>Package building process \u2013 overview</li> <li>Introduction to packaging at RDO</li> <li>RDO Packaging guidelines</li> <li>Requirements management</li> </ul>"},{"location":"contribute/packager/#package-maintainer-common-tasks","title":"Package Maintainer common tasks","text":"<ul> <li>Adding new packages to RDO</li> <li>Retiring a package in RDO</li> <li>Adding a new requirement</li> <li>Updating a requirement</li> <li>Fixing a FTBFS (failed to build from source)</li> <li>Adding a patch</li> </ul>"},{"location":"contribute/packager/#packager-tools","title":"Packager tools","text":"<ul> <li>rdopkg: swiss army knife for RDO packagers</li> <li>rdoinfo: RDO packages metadata</li> </ul>"},{"location":"contribute/rdo-packaging-guidelines/","title":"RDO OpenStack Packaging Guidelines","text":""},{"location":"contribute/rdo-packaging-guidelines/#introduction","title":"Introduction","text":"<p>This document collects guidelines and practical tips</p>"},{"location":"contribute/rdo-packaging-guidelines/#packaging-guidelines","title":"Packaging Guidelines","text":"<p>RDO packages mostly follow Fedora Packaging Guidelines. There are two exceptions:</p> <ul> <li>Override rules listed in this document.</li> <li>Exceptions granted by RDO Packaging Group (e.g. bundling)</li> </ul> <p>A set of examples for spec and other useful files can be found in openstack-example-spec github repository. These files can be used as templates for new packages although some adjustments may be needed for each particular case.</p>"},{"location":"contribute/rdo-packaging-guidelines/#package-naming-guidelines","title":"Package Naming Guidelines","text":"<p>RDO packages mostly follow Fedora Package Naming Guidelines. On top of it to maintain consistency in package names across different sets of RDO packages we follow:-</p> <ul> <li>For service package: name it like 'openstack-', ex. openstack-nova, openstack-cinder, etc. <li>For python library: name it like 'python-', ex. python-oslo-cache, python-novaclient, etc. <li>For puppet package: name it like 'puppet-', ex. puppet-nova, puppet-cinder, etc. <li>For tempest plugin: name it like 'python--tests-tempest', ex. python-heat-tests-tempest, python-mistral-tests-tempest, etc. <li>For ui package: name it like 'openstack--ui', ex. openstack-heat-ui, openstack-octavia-ui, etc. <li>For ansible role: name it like 'ansible-role-', ex. ansible-role-container-registry, ansible-role-chrony, etc. <li>For ansible collection: name it like 'ansible-collection-, ex. ansible-collection-containers-podman, etc. <p>NOTE: In case of python packages, srpms names should be prefixed with 'python-' and sub packages with 'python2-' or 'python3-'.</p>"},{"location":"contribute/rdo-packaging-guidelines/#rdo-guidelines","title":"RDO Guidelines","text":""},{"location":"contribute/rdo-packaging-guidelines/#systemd-packaging","title":"Systemd packaging","text":"<ul> <li>All services must be configured to allow automated restart</li> </ul> <pre><code>Restart=[on-failure|always]\n</code></pre> <ul> <li>If a service depends on other for proper start, you can use the <code>After=</code> and optionally <code>Requires=</code> parameters in unit configuration file. An example of dependencies for neutron-openvswitch-agent service:</li> </ul> <pre><code>After=syslog.target network.target network.service openvswitch.service\nRequires=openvswitch.service\n</code></pre> <ul> <li>The systemd package provides a set of rpm macros to handle systemd operations on %post, %preun and %postun (more details here).</li> </ul>"},{"location":"contribute/rdo-packaging-guidelines/#python-packaging-guidelines","title":"python packaging guidelines","text":"<ul> <li>Remove requirements files used by pip to download dependencies from the network. That may hide missing dependencies or integration issues (e.g. a dependency package only available in an incompatible version)</li> </ul> <pre><code>  rm -rf {,tests-}requirements.txt\n</code></pre> <ul> <li>Use versioned python macros everywhere.</li> </ul>"},{"location":"contribute/rdo-packaging-guidelines/#packages-requirements","title":"Packages requirements","text":"<ul> <li> <p>Check your package dependencies with <code>rdopkg reqcheck</code>.</p> </li> <li> <p>Versions for build requirements are not needed as the latest available version will be always installed at build time by the packaging tools.</p> </li> <li> <p>Actual requirements for default or common configurations of services must be added as explicit requires.</p> </li> <li> <p>Optional requirements for specific configurations must not be added as explicit requires.</p> </li> <li> <p>When versioning of explicit requires is needed be aware that epoch is used in some RDO packages. In those cases remember to add the epoch in the required version as in:</p> </li> </ul> <pre><code>Requires:         python-oslo-config &gt;= 2:2.6.0\n</code></pre>"},{"location":"contribute/rdo-packaging-guidelines/#configuration-files","title":"Configuration files","text":"<ul> <li>Use oslo-config-generator to generate configuration files.</li> </ul> <pre><code>oslo-config-generator --config-file=config-generator/keystone.conf\n</code></pre> <ul> <li>Configuration files must be in /etc and not /usr/etc.</li> </ul>"},{"location":"contribute/rdo-packaging-guidelines/#tests-packaging","title":"Tests packaging","text":"<p>OpenStack projects provide different tests including unit tests and functional tests, typically using the tempest framework.</p> <ul> <li> <p>Core packages shouldn't include tests as are not required in runtime.</p> </li> <li> <p>Unit tests should be included in a &lt;package name&gt;-tests-unit package that should depend on the test requirements.</p> </li> <li> <p>Tempest tests should be included in a &lt;package name&gt;-tests-tempest package which should depend on the dependencies to run the provided tests. Note that some projects include tempest tests in the main project git repository (so tempest package would be a subpackage in the same spec file) while others use a separate git repository (so a specific distgit and spec will be needed).</p> </li> <li> <p>&lt;package name&gt;-tests: includes all tests, and should be a virtual package requiring &lt;package name&gt;-tests-tempest and &lt;package name&gt;-tests-unit.</p> </li> </ul>"},{"location":"contribute/rdo-packaging-guidelines/#other-considerations","title":"Other considerations","text":"<ul> <li>To enforce consistency accross OpenStack services packages, use the following snippet to set upstream project name.</li> </ul> <pre><code>%global service keystone\n</code></pre> <p>RDO project provides different examples specs in openstack-example-spec for the different package types (OpenStack service, library, client, dashboard plugin, etc...). This examples can be used as templates for new packages being added to RDO repositories.</p>"},{"location":"contribute/rdo-packaging-guidelines/#patches","title":"Patches","text":"<p>RDO is and intends to remain a vanilla distribution of OpenStack. Our default policy is to refuse downstream patches, but RDO Packaging Group may grant exceptions on per-case basis</p> <ul> <li> <p>Feature patches: must be submitted upstream</p> </li> <li> <p>Security patches: requires RDO Security team clearance.</p> </li> <li> <p>FTBFS patches: requires peer review, and must be submitted upstream when possible.</p> </li> </ul>"},{"location":"contribute/release/","title":"Releasing","text":""},{"location":"contribute/release/#step-by-step-rdo-release-guide","title":"Step by step RDO release guide","text":"<p>Here you can find detailed information about what are the steps we are doing one by one (with explanation) to create new RDO release. This documentation is basen on our Jira board.</p>"},{"location":"contribute/release/#getting-ready-for-new-openstack-release","title":"Getting ready for new OpenStack release","text":"<p>This document describes how RDO builds and publishes new packages both in RDO CloudSIG and RDO Trunk repos around new release.</p>"},{"location":"contribute/requirements/","title":"Requirements management in RDO","text":""},{"location":"contribute/requirements/#introduction","title":"Introduction","text":"<p>OpenStack services usually need some pieces of software which are not developed as part of the project. They are are general purpose libraries (typically python modules) or services used in some way to run or build OpenStack packages as databases, messaging brokers, etc...</p> <p>OpenStack requirements project defines the policies and processes to manage requirements in upstream projects from a global perspective.</p>"},{"location":"contribute/requirements/#managing-openstack-requirements-in-rdo","title":"Managing OpenStack requirements in RDO","text":"<p>RDO provides all requirements for packaged services in RPM format from their own repos, so that no software should be installed from external repositories. This packages can be provided by:</p> <ul> <li> <p>CentOS base repositories, which is the preferred source of packages whenever possible:</p> <ul> <li>For CentOS Stream 9: BaseOS, AppStream, CRB and HighAvailability.</li> </ul> </li> <li> <p>Other CentOS SIG repositories (Virtualization, Storage, NFV, etc...). When a required package is being maintained by other CentOS SIG, it will be reused for RDO repos.</p> </li> <li>RDO CloudSIG repositories. When a package is not available from previous repos, it will be provided in RDO repositores. Note that it's required that these packages exist previously in Fedora so that they can be rebuilt with minimal changes (if any).</li> </ul> <p>If you have questions or special requests, don't hesitate in contacting RDO using our mailing lists or #rdo channel on OFTC.</p>"},{"location":"contribute/requirements/#adding-a-new-requirement-to-rdo","title":"Adding a new requirement to RDO","text":"<p>When a new requirement is needed for an OpenStack project included in RDO, package maintainers must follow this workflow:</p> <p></p> <p>Note that, typically new requirements are added only for the release of OpenStack under development, not for stable releases, although they may be accepted in previous releases if it's properly justified. Also, as we're currently maintaining releases on CentOS Linux 7, CentOS Stream 8 &amp; 9, there are particularities in adding new requirements for each of them.</p> <ol> <li> <p>If the project follows global-requirements processes, make sure that the requirement has been added to global-requirements.txt and upper-constraints.txt files as described in the upstream documentation </p> </li> <li> <p>Check if the new requirement is present in CentOS base channels. The easiest way to do this is using 'repoquery' command from a system running RPM based OS(CentOS/RHEL/Fedora):</p> <pre><code># For CentOS Stream 9:\nrepoquery --repofrompath=tmp,http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os \\\n--repofrompath=tmp2,http://mirror.stream.centos.org/9-stream/AppStream/x86_64/os \\\n--repofrompath=tmp3,http://mirror.stream.centos.org/9-stream/CRB/x86_64/os \\\n--repofrompath=tmp4,http://mirror.stream.centos.org/9-stream/HighAvailability/x86_64/os \\\n--disablerepo=* --enablerepo=tmp* \"*&lt;dependency&gt;\"\n\n# For CentOS Stream 8:\nrepoquery --repofrompath=tmp,http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os \\\n--repofrompath=tmp2,http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os \\\n--repofrompath=tmp3,http://mirror.centos.org/centos/8-stream/PowerTools/x86_64/os \\\n--repofrompath=tmp4,http://mirror.centos.org/centos/8-stream/HighAvailability/x86_64/os \\\n--disablerepo=* --enablerepo=tmp* \"*&lt;dependency&gt;\"\n</code></pre> <p>If it's present, the desired package is already available to RDO users. </p> </li> <li> <p>If the package is not in CentOS base repos, you can check if it has been already built by the CloudSIG using rdopkg:</p> <pre><code>rdopkg findpkg &lt;package name&gt;\n</code></pre> <p>as, for example:</p> <pre><code>$ rdopkg findpkg python-eventlet\nname: python-eventlet\nproject: python-eventlet\nconf: fedora-dependency\nupstream: https://src.fedoraproject.org/rpms/python-eventlet\npatches: None\ndistgit: http://review.rdoproject.org/r/deps/python-eventlet.git\nbuildsys-tags:\n  cloud7-openstack-ocata-release: python-eventlet-0.18.4-2.el7\n  cloud7-openstack-ocata-testing: python-eventlet-0.18.4-2.el7\n  cloud7-openstack-pike-release: python-eventlet-0.20.1-2.el7\n  cloud7-openstack-pike-testing: python-eventlet-0.20.1-2.el7\n  cloud7-openstack-queens-release: python-eventlet-0.20.1-6.el7\n  cloud7-openstack-queens-testing: python-eventlet-0.20.1-6.el7\n  cloud7-openstack-rocky-release: python-eventlet-0.20.1-6.el7\n  cloud7-openstack-rocky-testing: python-eventlet-0.20.1-6.el7\n  cloud7-openstack-stein-release: python-eventlet-0.24.1-3.el7\n  cloud7-openstack-stein-testing: python-eventlet-0.24.1-3.el7\n  cloud7-openstack-train-release: python-eventlet-0.25.1-1.el7\n  cloud7-openstack-train-testing: python-eventlet-0.25.1-1.el7\n  cloud8-openstack-train-release: python-eventlet-0.25.2-3.1.el8\n  cloud8-openstack-train-testing: python-eventlet-0.25.2-3.1.el8\n  cloud8-openstack-ussuri-release: python-eventlet-0.25.2-3.el8\n  cloud8-openstack-ussuri-testing: python-eventlet-0.25.2-3.el8\n  cloud8-openstack-victoria-candidate: python-eventlet-0.25.2-3.el8\n  cloud8-openstack-victoria-release: python-eventlet-0.25.2-3.1.el8\n  cloud8-openstack-victoria-testing: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-train-testing: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-ussuri-release: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-ussuri-testing: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-victoria-release: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-victoria-testing: python-eventlet-0.25.2-3.1.el8\n  cloud8s-openstack-wallaby-release: python-eventlet-0.30.0-1.1.el8\n  cloud8s-openstack-wallaby-testing: python-eventlet-0.30.0-1.1.el8\n  cloud8s-openstack-xena-candidate: python-eventlet-0.31.1-1.el8\n  cloud8s-openstack-xena-release: python-eventlet-0.31.1-1.el8\n  cloud8s-openstack-xena-testing: python-eventlet-0.31.1-1.el8\n  cloud8s-openstack-yoga-testing: python-eventlet-0.31.1-1.el8\n  cloud9s-openstack-wallaby-testing: python-eventlet-0.30.2-1.el9s\n  cloud9s-openstack-xena-testing: python-eventlet-0.31.1-1.el9s\n  cloud9s-openstack-yoga-testing: python-eventlet-0.31.1-1.el9s\ncentos-distgit: https://git.centos.org/rpms/python-eventlet\nmaster-distgit: http://review.rdoproject.org/r/deps/python-eventlet.git\nreview-origin: null\nreview-patches: null\ntags:\n  dependency: null\nmaintainers:\n- amoralej@redhat.com\n- jcapitao@redhat.com\n- ykarel@redhat.com\n</code></pre> <p>Note that the version of the package included in repositories is given by the CBS tags applied to each package (shown under buildsys-tags section for each package). Tags have a format cloud9s-openstack-&lt;release&gt;-&lt;phase&gt; where:</p> <ul> <li>release: is the OpenStack release name, as Wallaby, Xena or Yoga.</li> <li>phase:</li> <li><code>candidate</code> phase is assigned to packages to be rebuilt in   CBS but not pushed to any RDO repository.</li> <li><code>el&lt;centos_version&gt;-build</code> is assigned to packages that only required to build other   packages but are not a runtime requirement for any other package. (e.g centos_version   can be '9s' or '8')</li> <li><code>testing</code> phase means that the package is used in deployments using RDO Trunk   repo and published in a testing repo, but not official CloudSIG repository.</li> <li><code>release</code> phase means that is published in the official CloudSIG repository.   This phase is only available after a RDO version has been officially released   not for the one currently under development.</li> </ul> <p>For example, the package included in cloud8s-openstack-xena-release will be published in the CloudSIG repo for xena. The CBS tags flow will be: - Runtime requirements: candidate -&gt; testing -&gt; release - Build requirements: candidate -&gt; el8-build or el9s-build</p> <p>Note that, for the release currently under development (Yoga right now), testing and el9s-build phase will be available. The package included in cloud9s-openstack-yoga-testing will be the one used to deploy from RDO Trunk Master repositories and it will be automatically pushed to cloud9s-openstack-yoga-release at RDO Yoga is officially released and published.</p> <p>If the package is found for the required CBS tag, it's already in RDO repositories and no more actions are needed to add it to the repos. </p> </li> <li> <p>In case that the dependency is not in CentOS base or CloudSIG repo, you can check if it has been built by other SIGs in CBS web interface. You can use wildcards in the packages search expression. If you find the desired dependency, you can open a ticket in RDO Jira board requesting the inclusion of the package in RDO repos. RDO Core members will handle the request.     </p> </li> <li> <p>If the new package is not in CBS, you must check if it's packaged in Fedora using the Koji Web Interface. If the package exists, you need to open a review to rdoinfo project in RDO gerrit instance.</p> <p>For CentOS Stream 8 and 9, you need to add the new dependency to <code>deps.yml</code> file as in this example:</p> <pre><code># in deps.yml\n- project: python-ssh-python\n  name: python-ssh-python\n  conf: fedora-dependency\n</code></pre> <p>For CentOS Stream 8 only, you also need to add buildsys-tag in <code>buildsys-tags/cloud8s-openstack-yoga-candidate.yml</code></p> <pre><code># in buildsys-tags/cloud8s-openstack-yoga-candidate.yml\n- project: python-ssh-python\n  buildsys-tags:\n    cloud8s-openstack-yoga-candidate: python-ssh-python-0.9.0-1.el8\n</code></pre> <p>Where: - <code>project</code> and <code>name</code> must be the name of the main package (the same as in fedora). - <code>conf</code> must be <code>fedora-dependency</code>. - In <code>buildsys-tags</code> section a new line for the candidate tag in the OpenStack release in development (cloud8s-openstack-yoga-candidate) with the required NVR (name-version-release), which must be the same one found in Fedora replacing fcXX part in release by el8. For example, for python-ssh-python the build is python-ssh-python-0.9.0-1.fc36, so in buildsys-tags/cloud8s-openstack-yoga-candidate.yml, cloud8s-openstack-yoga-candidate must point to python-ssh-python-0.9.0-1.fc36.</p> <p>Once merged this review will be enough to rebuild the Fedora package in the CentOS Build System for CentOS Stream 8.</p> <p>For CentOS Stream 9, a few more steps are required to be able to rebuild the patch in CentOS Build System. After the review in rdoinfo repo is merged, some changes in config need to be done in the config which will be automatically triggered. You can check when the distgit for the new dependency is created by monitoring if it appears in https://review.rdoproject.org/r/admin/repos/deps/. <p>Once the repo is available, you can propose a review to build the package. We have a tool which does the work: setup_distgit.sh</p> <pre><code>$ git clone https://review.rdoproject.org/cgit/gating_scripts\n$ cd gating_scripts\n$ bash -x setup_distgit.sh google-benchmark google-benchmark-1.6.0-1.fc36 yoga 9s\n$ cd workdir/&lt;project_name&gt;\n$ git diff\n</code></pre> <p>Basically, the script clones the new repo, downloads the Fedora build and dispatches SPEC and sources files to the right place.</p> <p>If you\u2019re ok with the change, submit it. Note: this last step is for CentOS Stream 9 only.</p> <p>This review will rebuild the Fedora package in the CentOS Build System for CentOS Stream 9 and make it available to be pushed to the next CBS phase. </p> <li> <p>When the packages doesn't exist even in Fedora you need to add the package following the New package process. Note that a Fedora packager needs to participate in this process. While RDO core members may maintain the new package for common requirements used by different projects, dependencies for specific project must be maintained in Fedora by the project team. Once the package is included in Fedora repos you can create a gerrit review as explained in step 5.     </p> </li> <li> <p>Once the package is rebuilt in CBS (review in step 5 is merged) you can push it to the next phase, this means testing (for runtime dependencies) or el9s-build (for build-time dependencies). This is done by sending a new review to rdoinfo project adding a new line under <code>buildsys-tags</code> to both <code>buildsys-tags/cloud9s-openstack-yoga-testing.yml</code> and <code>buildsys-tags/cloud8s-openstack-yoga-testing.yml</code> file for the new tag as in this example:</p> <pre><code># in buildsys-tags/cloud8s-openstack-yoga-testing.yml\nbuildsys-tags:\n  cloud8s-openstack-yoga-testing: python-stestr-3.2.0-3.el8\n\n# in buildsys-tags/cloud9s-openstack-yoga-testing.yml\nbuildsys-tags:\n  cloud9s-openstack-yoga-testing: python-stestr-3.2.0-3.el9s\n</code></pre> <p>Once this review is merged, the tag will be applied to this build and the package  will be added to the testing repo for Yoga (note that some delay, up to 30 minutes  is expected). </p> </li> <li> <p>After the package is available in the repos, you can add it to the list of Requires or BuildRequires in your package spec file. Note that optional dependencies not used in default or common configurations should not be added as Requires but installed only when needed.</p> </li>"},{"location":"contribute/requirements/#updating-a-requirement-in-rdo-cloudsig-repositories","title":"Updating a requirement in RDO CloudSIG repositories","text":"<p>There are some rules to follow when a requirement update is needed by a OpenStack project. Following diagram summarizes the considerations to update the dependencies in RDO.</p> <p></p> <p>If the dependency is included in upstream OpenStack global requirements project, the required version should be equal (exceptions will be shown below) to the version in upper-constraints file for the appropiate OpenStack release (requirements project has stable/\\ branches). For the master branch, RDO provides a report to quickly check the state of dependencies compared to upper-constraints."},{"location":"contribute/requirements/#packages-provided-in-centos-stream-os-repos","title":"Packages provided in CentOS Stream OS repos","text":"<ul> <li>For packages provided in CentOS Stream OS repos, the preferred option is to consume those packages from OS whenever possible, even if versions are below the ones in upper-constraints.txt file. If OpenStack requires newer versions of those packages to work properly (for example, an OpenStack project requires a minimal version of the dep which is newer that the one in CentOS) there are two options:</li> <li>Request a package update in CentOS by opening a bug in RHEL product. This bug will be evaluated following the RHEL process.</li> <li>Add it to RDO repository following the process described in Adding a new requirement to RDO. Note that this may impact other packages using it in the Operating System so this option should be minimized.</li> </ul>"},{"location":"contribute/requirements/#packages-not-provided-in-centos-stream-os-repos","title":"Packages not provided in CentOS Stream OS repos","text":"<ul> <li>The required dependencies not included in the CentOS OS are provided in the RDO repos. Before updating a dependency in RDO, the package must be updated to the required version in Fedora. If it has not been updated first you can:</li> <li>Contact Fedora package maintainer or search for open bug against component, example component:python-migrate, if bug does not exist, open a bug for Fedora product requesting the update.</li> <li> <p>Or you can directly propose to update fedora package by creating your own pull request, following Fedora packaging guide and Fedora CI - Pull Requests. Once the pull request merged, the package must be built by its maintainer. Building Fedora\u2019s packages can be monitored on Koji.</p> </li> <li> <p>Once the package is build in Fedora, you can update the requirement in RDO. For CentOS Stream 9, you need to rebuild the package first by sending  a review to the RDO Gerrit instance in the distgit project <code>deps/&lt;package name&gt;</code> in the branch <code>c9s-&lt;openstack version&gt;-rdo</code>. RDO provides the script setup_distgit.sh to ease the preparation of the dependency update review by importint content from Fedora. i.e. if you need to update python module <code>foo</code> to version 1.0.0 in OpenStack Zed and the package is ready in fedora as <code>python-foo-1.0.0-1.fc37</code> you should execute:</p> <pre><code>$ git clone https://review.rdoproject.org/cgit/gating_scripts\n$ cd gating_scripts\n$ bash -x setup_distgit.sh python-foo python-foo-1.0.0-1.fc37 zed 9s\n$ cd workdir/python-foo\n$ git diff\n</code></pre> <p>Basically, the script clones the new repo, downloads the Fedora build and dispatches SPEC and sources files to the right place.</p> <p>If you\u2019re ok with the change, commit it and send the review. Note that, in some cases, changes are required to build fedora packages for CentOS. It is usually a good idea to test new package with mock or rpm-build.</p> </li> <li> <p>Once the patch in <code>deps/&lt;dependency&gt;</code> is merged, the package is built and tagged in CBS but will not be available in the RDO repositories. The next step is to include the package in RDO Testing repo for the appropiate OpenStack release. This is done by sending a patch to the rdoinfo project, adding it to the file <code>buildsys-tags/cloud9s-openstack-&lt;openstack release&gt;-testing</code> like this example.</p> </li> <li> <p>Once the package exist in testing tag it will be available in the RDO Trunk repositories to be used in jobs or update in rpm spec. For stable releases (non master) an automatic task will also propose review to rdoinfo to upddate the package the corresponding <code>release</code> tag in the same OpenStack release in rdoinfo repo. Once that  patch is merged, the update will also appear in the CloudSIG official CentOS mirror.</p> </li> </ul>"},{"location":"contribute/requirements/#contact-us","title":"Contact us","text":"<p>If you have questions or special requests about requirements, don't hesitate to contact RDO community members using our mailing lists or #rdo channel on OFTC.</p>"},{"location":"contribute/retire-packages/","title":"Retiring a package from RDO","text":""},{"location":"contribute/retire-packages/#what-does-retiring-a-package-means","title":"What does retiring a package means","text":"<ul> <li>The package will not be build and published to RDO Trunk repo</li> <li>The package will not be build in CBS and published to next CloudSIG repo</li> </ul> <p>NOTE: The package can be retired only from the current development release.</p>"},{"location":"contribute/retire-packages/#how-to-remove-an-openstack-package-from-rdo-trunk","title":"How to remove an OpenStack package from RDO Trunk","text":"<p>Package for a project can exist across different releases. So retiring it in RDO needs to go via stages.</p> <p>To remove a package, following steps are required:-</p> <p>Stage 1:- Project Source is retired/deleted upstream, but it's package still need to be maintained because it's required by other projects</p> <ul> <li> <p>Send a review to <code>rdoinfo</code> like Example review to pin(add source-branch: <code>&lt;good commit&gt;</code>) the project against the tag or commit, so package get's build from pinned commit rather than latest commit(deleted source code).</p> <p>```</p> </li> <li> <p>Send a review to <code>config</code> project like Example review to run DLRN-pinned jobs(legacy-DLRN-rpmbuild-pinned, legacy-DLRN-rpmbuild-fedora-pinned) so package get's build from pinned commit rather than from latest, This is required so that spec changes can be done like https://review.rdoproject.org/r/#/c/20383/.</p> </li> </ul> <p>Stage 2:- Package is no longer needed by other projects:-</p> <ul> <li>Send a review to rdoinfo project in review.rdoproject.org. In this change you need to delete the tag for the project for which package is not needed to built.</li> </ul> <p>Once the change is merged in rdoinfo, package will no longer exist in RDO trunk repo, but it will still be built for previous releases(for which tag is defined in <code>rdoinfo</code>):- RDO Trunk repos.</p>"},{"location":"contribute/retire-packages/#need-to-add-source-branch-like-below","title":"Need to add source-branch like below","text":"<ul> <li>project: oslo-sphinx   tags:     train-uc:       source-branch: f92583cfc34292ec1441368f984c9692346946c4  ```</li> </ul>"},{"location":"deliverables/","title":"What we deliver?","text":"<p>This section contains information what and how RDO is releasing. Also you can find here description and differences of deliverables documented and find out, how the process of releasing looks like.</p>"},{"location":"deliverables/general_concept_comparison/","title":"Overview and comparison of RDO's deliverables","text":"<p>The RDO project has turning around two main concepts of deliverables: packages and repositories. Differences between them and their purpose may be confusing, so this documents is created to summarize the knowledge and emphasise divergences to help fully understand them.</p>"},{"location":"deliverables/general_concept_comparison/#packages","title":"Packages","text":"<p>Packages in RDO are the most atomic unit in RDO and there are basically two kinds of them:</p> <ul> <li>OpenStack RDO packages (i.e. openstack-nova, openstack-neutron, python-osprofiler)</li> <li>dependencies (i.e. python-hatchling, python-eventlet)</li> </ul> <p>Both types of package have distgits (repositories containing spec files) in common, as necessary part of package building process.</p> <p>The table below shows main characteristic of each kind of package.</p> <p> </p> OpenStack RDO packages dependencies 1. Code comes from upstream OpenStack project Code comes from any upstream project 2. Created in RDO Comes from Fedora 3. Build by DLRN (Trunks) or CentOS CBS (CloudSIG) Build by CentOS Community Build Service <p>The first row of the table compares the origin of each kind of package.</p> <p>The second row describes how packages land in RDO projects. In other words, each dependency's distgit has to be present in Fedora first, while distgits for OpenStack packages are created by package maintainers, as in this example review.</p> <p>The third row compares how packages are built.</p> <p>These two kinds of packages are what composes the RDO repositories, in addition RDO project also takes part in maintaining and developing Fedora OpenStackSIG packages. The purpose of this special interest group is to maintain and ship latest packages such as: OpenStack clients, libraries and dependencies in Fedora.</p>"},{"location":"deliverables/general_concept_comparison/#repositories","title":"Repositories","text":"<p>In RDO we deliver two types of repositories:</p> <ul> <li>RDO Trunks</li> <li>RDO CloudSIGs</li> </ul> <p>Each of them is managed and delivered in different way. Both of them are composed from OpenStack packages and dependencies, but they are shipped differently.</p> <p> </p> RDO Trunks RDO CloudSIGs 1. build by DLRN build by CentOS Community Build Service 2. new package with every new commit new package with every new tag released upstream 3. Delivered very close in time after new commit Delivered in days 4. Fetch source code through involved repo Fetch tarball for point release 5. Continuous delivery of master branch Repo released after OpenStack GA 6. Unsigned packages Signed packages 7. Delivered in trunk.rdoproject.org server Delivered in official Centos mirrors in CloudSIG"},{"location":"deliverables/general_concept_comparison/#building","title":"Building","text":"<p>The first row shows that each repository is build by different system. All trunk repos are created and managed by DLRN, while CloudSIGs is managed by CBS.</p>"},{"location":"deliverables/general_concept_comparison/#handling-new-packages","title":"Handling new packages","text":"<p>The second and third row compare ways of handling new packages. In trunks, any time a new commit is merged in upstream project, the package building process is triggered and new repositories containing this package are published, so the time of publishing new deliverable is very short. For RDO CloudSIGs the process in slightly longer, because publishing new repo is happening when new tag is released in upstream, as in example review.</p>"},{"location":"deliverables/general_concept_comparison/#origin-of-sources","title":"Origin of sources","text":"<p>Package process building is fetching project source code directly from repository, while RDO CloudSIGs are basing on tarballs.</p>"},{"location":"deliverables/general_concept_comparison/#frequency-of-releasing","title":"Frequency of releasing","text":"<p>Trunk repositories are constantly following master branch for all projects, so new packages and repositories are delivered in continuous way. RDO CloudSIGs are released only after OpenStack GA.</p>"},{"location":"deliverables/general_concept_comparison/#security","title":"Security","text":"<p>Trunks contains only unsigned packages on the contrary to RDO CloudSIGs.</p>"},{"location":"deliverables/general_concept_comparison/#distribution","title":"Distribution","text":"<p>Trunks are distributed by trunk servers. RDO CloudSIGs are delivered in official Centos mirrors.</p>"},{"location":"deliverables/how-to-install-rdo-repo/","title":"How to install RDO repositories","text":"<p>TBD</p>"},{"location":"deliverables/release-cadence/","title":"Release cadence","text":""},{"location":"deliverables/release-cadence/#rdo-packaging-release-cadence","title":"RDO packaging release cadence","text":"<p>This page describes the release cadence of RDO packages in relation to different community distributions, giving an approximate idea of community support status of any given OpenStack release.</p>"},{"location":"deliverables/release-cadence/#centos-versions","title":"CentOS Versions","text":"<p>Due to the slower release cadence of RHEL and therefore CentOS, only the most recent release plus the previous one are supported, in keeping up with upstream policy. Older versions of the operating system such as CentOS 7 do not receive later releases.</p> <p>When there is a new major CentOS release, the following OpenStack version is packaged for both for the new and the previous version of CentOS. The purpose of this policy is to ease the trasition between them.</p>"},{"location":"deliverables/release-cadence/#maintained-rdo-versions-in-cloudsig-repos","title":"Maintained RDO versions in CloudSIG repos","text":"<p>RDO CloudSIG repositories are based on tag releases provided by OpenStack project. According to the definition of maintenance phases of OpenStack, RDO will not update CloudSIG repos after a release is transitioned to Extended Maintenance status.</p> <p>Current maintained CloudSIG releases are:</p> CentOS Stream 9 Epoxy supported CentOS Stream 9 Dalmatian supported CentOS Stream 9 Caracal supported CentOS Stream 9 Bobcat supported CentOS Stream 9 Antelope unmaintained"},{"location":"deliverables/release-cadence/#maintained-rdo-versions-in-rdo-trunk-repos","title":"Maintained RDO versions in RDO Trunk repos","text":"<p>In order to provide patches merged in OpenStack releases in Extended Maintenance state, RDO mantains RDO Trunk repositories following stable branches or pinned releases until they are EOL.</p> <p>Currently, RDO maintains following RDO Trunk repositories:</p> CentOS Stream 9 Epoxy supported CentOS Stream 9 Dalmatian supported CentOS Stream 9 Caracal supported CentOS Stream 9 Bobcat supported CentOS Stream 9 Antelope supported CentOS Stream 9 Zed unmaintained CentOS Stream 9 Yoga unmaintained"},{"location":"deliverables/release-cadence/#rhel-compatibility","title":"RHEL compatibility","text":"<p>Although it is expected that RDO works fine in Red Hat Enterprise Linux (RHEL) OS, it is currently not tested on it. Note that CentOS Stream is a continuosly delivered distribution that tracks just ahead of RHEL and differences between both distributions at a certain point are expected.</p> <ul> <li>What is CentOS Stream?</li> </ul>"},{"location":"deliverables/release-cadence/#fedora","title":"Fedora","text":"<p>The RDO team, in coordination with the Fedora OpenStack SIG maintains the OpenStack Clients in Fedora repositories.</p> <ul> <li>Fedora OpenStack SIG</li> </ul>"},{"location":"deliverables/release-cadence/#references","title":"References","text":"<ul> <li>OpenStack Releases</li> </ul>"},{"location":"deliverables/repos/","title":"Overview of available RDO repos","text":"<p>There are a number of different repos that the RDO project works out of. This is an overview of each of them.</p> <p>NOTE: Overview and comparison of RDO's deliverables can be found in this article.</p>"},{"location":"deliverables/repos/#rdo-cloudsig-repositories","title":"RDO CloudSIG repositories","text":"<p>Provide a set of stable OpenStack packages through CentOS CloudSIG repos based on CBS, CentOS Community Build System:</p> <ul> <li>The RDO CloudSIG repos are only published after GA of a upstream release (only stable branches are used, not master).</li> <li>New packages are created only when a new point release is published (release tag created) on upstream stable repositories.</li> <li>In addition to the vanilla upstream code, some patches may be applied during packaging:</li> <li>Fixes for security issues or critical bugs not backported upstream. Note that an upstream-first policy is applied so these patches will be applied only after merged in upstream master.</li> <li>Patches required for the packaging process.</li> </ul> <p>For each OpenStack release RDO provides two repos:</p>"},{"location":"deliverables/repos/#cloudsig-ga-repo","title":"CloudSIG GA repo","text":"<p>The GA repository is the one you should be using for your production environment. It contains tested, digitally signed packages.</p> <p>To enable this repository on a CentOS system, run the following command:</p> <pre><code>For CentOS Stream 9:\n$ sudo dnf install centos-release-openstack-&lt;release&gt;\n</code></pre> <p>Where <code>&lt;release&gt;</code> is the name of the OpenStack release you want to install. The RDO community supports the same OpenStack releases supported by upstream.</p> <p>On a non-CentOS system (e.g. RHEL), you can run the following command to setup the RDO GA repositories:</p> <pre><code>For the latest OpenStack release in RHEL 9:\n$ sudo dnf install http://trunk.rdoproject.org/rdo_release/rdo-release.el9s.rpm\n\nFor previous OpenStack releases in RHEL 9:\n$ sudo dnf install http://trunk.rdoproject.org/rdo_release/openstack-&lt;release name&gt;/rdo-release-&lt;release name&gt;.el9s.rpm\n</code></pre> <p>This will configure the repositories for the most recent version of RDO. RPMs for previous releases are accessible from this location.</p>"},{"location":"deliverables/repos/#cloudsig-testing-repo","title":"CloudSIG Testing repo","text":"<p>The testing repository contains packages that have not gone through our complete test suite. These packages can be useful to test newer versions of the code, or when you need to quickly deliver a hotfix to your production environment. Please keep in mind that packages from the testing repository are not digitally signed.</p> <p>If you enabled the RDO repositories using the <code>centos-release-openstack-*</code> RPM, run the following command to enable the testing repository:</p> <pre><code>$ sudo yum-config-manager --enable centos-openstack-&lt;release&gt;-test\n</code></pre> <p>If you used the <code>rdo-release</code> RPM, run the following command:</p> <pre><code>$ sudo yum-config-manager --enable openstack-&lt;release&gt;-testing\n</code></pre>"},{"location":"deliverables/repos/#comparison-of-cloudsig-ga-repo-and-testing-repo","title":"Comparison of CloudSIG GA repo and testing repo","text":""},{"location":"deliverables/repos/#rdo-trunk-repositories","title":"RDO Trunk repositories","text":"<p>RDO Trunk repositories are built using the most recent commit from each of the OpenStack projects. They are used in different ways:</p> <ul> <li>By several OpenStack CI jobs, to test packages built from the current under-development branch.</li> <li>Internally by the RDO community, to ensure that our packaging pipeline is always up to date.</li> <li>They can also be used to deliver hotfixes for stable releases, as soon as the relevant patch has been merged in the upstream repos.</li> </ul> <p>The RDO Trunk packages are not digitally signed, and have gone through some minimal CI. You can enable the CI-passed RDO Trunk repo using the following command:</p> <pre><code>$ sudo yum-config-manager --enable rdo-trunk-newton-tested\n</code></pre> <p>If you need a package using the latest commit, even before it passes CI (be aware this is bleeding edge!), go to the RDO Trunk web.</p>"},{"location":"deliverables/trunk-repos/","title":"RDO Trunk repos","text":"<p>RDO Trunk repositories are built using the most recent commit(or from the pin to a commit/tag/branch if <code>source-branch</code> is set for a release in rdoinfo) from each of the OpenStack projects defined for a release. We host the RDO Trunk repositories at https://trunk.rdoproject.org/. On that server, you will find several repositories:</p> <ul> <li>CentOS Stream 9 master, using versions from upper-constraints</li> <li>CentOS Stream 9 stable releases for the currently supported versions</li> </ul> <p>These repos contain packages build for each OpenStack project defined for a particular release in <code>rdoinfo</code>. This mapping of repo and release is as follows:-</p> <ul> <li>CentOS Stream 9 master, using versions from upper-constraints with current release rdoinfo tag i.e zed-uc</li> <li>CentOS Stream 9 stable releases for the currently supported versions with stable release rdoinfo tag other than current release zed-uc</li> </ul>"},{"location":"deliverables/trunk-repos/#the-upper-constraints-based-repositories","title":"The upper-constraints based repositories","text":"<p>The gate jobs for each OpenStack project use a common set of dependencies, defined by the requirements repository. One of the files on that repository is upper-constraints.txt, which contains the supported version for each library on each OpenStack release.</p> <p>Why is this file important? It defines an upper cap for every gate job, meaning those are the versions all OpenStack projects are being tested against. For example, if the specified version for <code>python-novaclient</code> in the file is X.Y.Z, we can safely assume that this version will work fine for all projects, but we cannot say the same for any commit beyond that point.</p> <p>This is also important when packaging, because we want our generated repositories to be usable by upstream CIs, so we need to provide a set of packages that matches the versions available in the <code>upper-constraints.txt</code> file. For this reason RDO builds all libraries and clients from the latest versions in <code>upper-constraints.txt</code>, and every other project is built from the master or stable branch.</p>"},{"location":"deliverables/trunk-repos/#hashed-repos-and-special-repos","title":"Hashed repos and special repos","text":"<p>When each new upstream commit is built, a repository is created with the new package and the latest versions from every other package built by RDO Trunk. This new repository is located in a hashed URL. This URL is built using:</p> <ul> <li>The hash of the commit for the project that triggered the build. I'll take as example, commit 5848c0dd from openstack-neutron, long hash is 5848c0dd1c951e916c0b769f711d8aafa6aa72b1.</li> <li>The short hash of the distgit repo for the project. In the same example, it is commit 21f87ec3 from the neutron-distgit repo which was the latest commit when the neutron patch was merged.</li> <li>The component for the package. For each project, a component is defined in rdoinfo openstack packages file. For neutron the component is <code>network</code> (you can find it easily with <code>rdopkg info</code> tool).</li> </ul> <p>With that info we can figure out the repo URL:</p> <p>https://trunk.rdoproject.org/centos9-master/component/network/58/48/5848c0dd1c951e916c0b769f711d8aafa6aa72b1_21f87ec3/</p> <p>Note the pattern:</p> <p><code>https://trunk.rdoproject.org/centos&lt;centos version&gt;-&lt;release&gt;/component/&lt;component name&gt;/&lt;1:2 code hash&gt;/&lt;3:4 code hash&gt;/&lt;long code hash&gt;_&lt;short distgit hash&gt;/</code></p> <p>Besides hashed repositories, we have some special directories, created as symlinks to hashed repos:</p> <ul> <li>current points to the repository with contains the last successfully built package from every project.</li> <li>consistent points to the latest repository where none of the packages have current build failures.</li> <li>current-passed-ci points to the last consistent repository that passed all the promotion CI tests.</li> </ul> <p></p>"},{"location":"deploy/","title":"RDO OpenStack deployment","text":"<p>There have always been multiple ways of deploying OpenStack. In RDO we are using some of them. Before starting your RDO deployment, make sure you understand the different repo flavors and releases that RDO is providing by reading our deliverables documentation.</p>"},{"location":"deploy/#packstack","title":"Packstack","text":"<p>For an initial test deployment, follow the Packstack instructions. While using Packstack is sufficient as a proof of concept, there are other ways that you can use to deploy OpenStack with RDO.</p>"},{"location":"deploy/#puppet-openstack-integration","title":"Puppet OpenStack Integration","text":"<p>Puppet OpenStack modules provide puppet-based per-service modules intended to provide automation to OpenStack cloud deployments based on Puppet automation engine. More about can be found in official documentation. RDO provides rpms for puppet modules and continuously test and validate its packages and repos using puppet-openstack-integration CI repository.</p>"},{"location":"deploy/#openstack-ansible","title":"OpenStack Ansible","text":"<p>This project has partial support for RDO as provider for binary installations in CentOS, hovewer it's not tested in our CI. Main documentation can be find here, there is also available a deployment guide.</p>"},{"location":"deploy/#rdo-with-ceph-as-storage","title":"RDO with Ceph as storage","text":"<p>Under this article you can find instructions how to install RDO with Ceph as storage.</p>"},{"location":"deploy/#rdo-on-okd-experimental","title":"RDO on OKD - experimental","text":"<p>Deployment of OpenStack based on OKD, The Community Distribution of Kubernetes, where OpenStack management is handled through a new podified control plane (a set of tools for deploying and managing an OpenStack control plane as Kubernetes-native pods). You can read documentation and instructions about RDO on OKD Proof of Concept, which is a part of CentOS CloudSIG. Also you can watch RDO's presentation which is explaining that concept in details.</p>"},{"location":"deploy/#tools-used-in-rdo","title":"Tools used in RDO","text":"<ul> <li>DLRN: What it is, what we use it for</li> <li>SoftwareFactory</li> </ul>"},{"location":"deploy/install-with-ceph/","title":"Install RDO with Ceph as storage","text":""},{"location":"deploy/install-with-ceph/#the-ceph-releases-used-for-each-rdo-release","title":"The Ceph releases used for each RDO release","text":"RDO Release Ceph Release Dalmatian Reef Caracal Reef Bobcat Reef Antelope Quincy Zed Quincy Yoga Pacific"},{"location":"deploy/install-with-ceph/#enable-epel-repository-for-ceph-reef","title":"Enable EPEL repository for Ceph Reef","text":"<p>Since the Ceph Reef release, the CentOS Stream Storage SIG decided to pull some dependencies from the EPEL repo instead of rebuilding and providing them itself. As a result, the EPEL repository needs to be enabled on the target host in order to be able to install <code>centos-release-ceph-reef</code> sucessfully. However, enabling the EPEL repository with the default parameters might conflict with the RDO repository (i.e duplicate packages with different NVR). To avoid this conflict, if you plan to install RDO OpenStack and Ceph services in the same host, you must set the EPEL repository with a lower priority and include only the packages needed, see below:</p> <pre><code>  $ sudo dnf update\n  $ sudo dnf install 'dnf-command(config-manager)'\n  $ sudo dnf config-manager --enable crb\n  $ sudo dnf install epel-release\n  $ sudo dnf config-manager --disable epel-next\n  $ sudo dnf config-manager --disable epel-cisco-openh264\n  $ sudo dnf config-manager --setopt epel.priority=100 --save epel\n  $ sudo dnf config-manager --setopt epel.includepkgs=\"libarrow*,parquet*,python3-asyncssh,re2,python3-grpcio,grpc*,abseil*\" --save epel\n  $ sudo dnf install centos-release-ceph-reef\n  $ sudo dnf install ceph\n</code></pre> <p>Note: installing <code>centos-release-ceph-reef</code> is not needed if <code>centos-releae-openstack-bobcat</code> is already installed (i.e it's a requirement).</p>"},{"location":"deploy/packstack/","title":"Packstack: Create a proof of concept cloud","text":"<p>Packstack is an OpenStack deployment tool intended to install Proof of Concept small environments in a quick and easy way using the RDO distribution on a CentOS Stream hosts. Production features such as High Availability, OpenStack upgrades or other day-2 operations are out of the scope of Packstack. For these cases, you can rely on other recommended tools described in Deploy RDO section.</p> <p>This document shows how to spin up a proof of concept cloud on one node using the Packstack installation utility.</p> <p>These instructions apply to the following Release and Operating Systems -  Antelope, Bobcat and Caracal on CentOS Stream 9.</p>"},{"location":"deploy/packstack/#warning","title":"WARNING","text":"<p>Read this document in full, then choose your install path: - Summary for the impatient - Step by step instruction</p> <p>Don't just start typing commands at Summary for the impatient and proceed downwards through the page.</p>"},{"location":"deploy/packstack/#summary-for-the-impatient","title":"Summary for the impatient","text":"<p>If you are using non-English locale make sure your <code>/etc/environment</code> is populated:</p> <pre><code>LANG=en_US.utf-8\nLC_ALL=en_US.utf-8\n</code></pre> <p>If your system meets all the prerequisites mentioned below, proceed with running the following commands.</p> <ul> <li>On CentOS Stream 9:</li> </ul> <pre><code>$ sudo dnf update -y;\n  sudo dnf config-manager --enable crb;\n  sudo dnf install -y centos-release-openstack-caracal;\n  sudo setenforce 0;\n  sudo dnf update -y;\n  sudo dnf install -y openstack-packstack;\n  sudo packstack --allinone\n</code></pre> <p>Note for RHEL: Although it is expected that RDO works fine on RHEL, it is currently not tested in RHEL OS.</p>"},{"location":"deploy/packstack/#step-by-step-instruction","title":"Step by step instruction","text":""},{"location":"deploy/packstack/#step-0-prerequisites","title":"Step 0: Prerequisites","text":""},{"location":"deploy/packstack/#software","title":"Software","text":"<p>CentOS Stream 9 is the minimum recommended version, or the equivalent version of one of the RHEL-based Linux distributions such as Red Hat Enterprise Linux, Scientific Linux, and so on. Packages are provided for x86_64, aarch64 and ppc64le architectures although most of the testing is done on x86_64.</p>"},{"location":"deploy/packstack/#hardware","title":"Hardware","text":"<p>Machine with at least 16GB RAM, processors with hardware virtualization extensions, and at least one network adapter.</p>"},{"location":"deploy/packstack/#hostname","title":"Hostname","text":"<p>Name the host with a fully qualified domain name rather than a short-form name to avoid DNS issues with Packstack. FQDN can be defined by command:</p> <pre><code>$ sudo hostnamectl set-hostname [hostname.domain]\n\n</code></pre> <p>example:</p> <pre><code>$ sudo hostnamectl set-hostname packstack-host.example.com\n\n</code></pre>"},{"location":"deploy/packstack/#network","title":"Network","text":"<p>If you plan on having external network access to the server and instances, this is a good moment to properly configure your network settings. A static IP address to your network card, and disabling NetworkManager are good ideas.</p> <p>Disable firewalld and NetworkManager</p> <pre><code>$ sudo systemctl disable firewalld;\n  sudo systemctl stop firewalld;\n  sudo systemctl disable NetworkManager;\n  sudo systemctl stop NetworkManager;\n  sudo systemctl enable network;\n  sudo systemctl start network\n</code></pre>"},{"location":"deploy/packstack/#step-1-software-repositories","title":"Step 1: Software repositories","text":"<p>On CentOS Stream 9, first you need to enable the <code>crb</code>. Then, the <code>extras-common</code> repository provides the RPM that enables the OpenStack repository. It is enabled by default on CentOS Stream 9, so you can simply install the RPM to set up the OpenStack repository:</p> <pre><code>$ sudo dnf config-manager --enable crb\n$ sudo dnf install -y centos-release-openstack-caracal\n</code></pre> <p>Update your current packages:</p> <pre><code>$ sudo dnf update -y\n</code></pre> <p>Looking for an older version? See http://rdoproject.org/repos/ for the full listing.</p>"},{"location":"deploy/packstack/#step-2-install-packstack-installer","title":"Step 2: Install Packstack Installer","text":"<pre><code>$ sudo dnf install -y openstack-packstack\n</code></pre>"},{"location":"deploy/packstack/#step-3-disable-selinux-enforcing-mode","title":"Step 3: Disable selinux enforcing mode","text":"<p>There are known issues with selinux policies and rabbitmq in CentOS Stream 9. Disable selinux enforcing mode:</p> <pre><code>$ sudo setenforce 0\n</code></pre>"},{"location":"deploy/packstack/#step-4-run-packstack-to-install-openstack","title":"Step 4: Run Packstack to install OpenStack","text":"<p>Packstack takes the work out of manually setting up OpenStack. It provides a set of options to specify the desired services and configurations for each installation. You can list all the available parameters using:</p> <pre><code>$ packstack --help\n</code></pre> <p>For a simple, single node OpenStack deployment with default options, run the following command:</p> <pre><code>$ sudo packstack --allinone\n</code></pre> <p>The Packstack command line interface accepts an answers file as a mechanism to specify the parameters. The base answers file can be created with:</p> <pre><code>$ packstack --gen-answer-file\n</code></pre> <p>Then can be used by using <code>--answer-file</code> option:</p> <pre><code>$ sudo packstack --answer-file=&lt;path to the answers file&gt;\n</code></pre> <p>If you have run Packstack previously, there will be a file in your home directory named something like <code>packstack-answers-20130722-153728.txt</code> You will probably want to use that file again, using the <code>--answer-file</code> option, so that any passwords you have already set (for example, mysql) will be reused.</p> <p>The installer will ask you to enter the root password for each host node you are installing on the network, to enable remote configuration of the host so it can remotely configure each node using Puppet.</p> <p>Once the process is complete, you can log in to the OpenStack web interface Horizon by going to <code>http://$YOURIP/dashboard</code>. The user name is <code>admin</code>. The password can be found in the file <code>keystonerc_admin</code> in the <code>/root</code> directory of the control node.</p>"},{"location":"deploy/tripleo/","title":"TripleO","text":"<p>TripleO is a set of tools for the deployment and management of OpenStack which utilizes the RDO repositories. The TripleO project was retired after the Zed release of OpenStack.</p> <p>The name TripleO refers to three related things:</p> <ul> <li>A design pattern, where an underlying OpenStack instance is used to deploy and then to manage another, usually more complex, OpenStack instance.</li> <li>A set of configuration files and scripts which contain OS image building rules and service configuration rules</li> <li>The upstream program within the OpenStack project which develops the various scripts and utilities which are combined to deliver the complete software solution.</li> </ul> <p>The design pattern utilizes a single-purpose deployment OpenStack which deploys and manages a more sophisticated, general-purpose OpenStack instance which is what gives TripleO its name. TripleO is short for OpenStack On OpenStack.</p> <p>Upstream TripleO documentation:</p> <ul> <li>http://docs.openstack.org/developer/tripleo-docs/</li> </ul> <p>Note: Limit your environment-specific content in the menu on the left-hand side of the documentation page.</p> <p>RDO/TripleO documentation:</p> <ul> <li>TripleO in RDO Xena release</li> </ul> <p>TripleO YouTube channel:</p> <ul> <li>TripleO YouTube Channel</li> </ul>"},{"location":"deploy/tripleo/#get-in-touch","title":"Get in touch","text":"<ul> <li>IRC: #tripleo and #rdo channels on OFTC.</li> <li>Mailing list: openstack-discuss, using [TripleO] tag in the subject of the email.</li> </ul>"},{"location":"factory/","title":"Factory","text":"<p>This section presents documents about how the factory behind building packages and repositories looks like. Here you will find sections about infrastructure, promotions and all tooling specific to this process.</p>"},{"location":"factory/dlrn/","title":"DLRN: What it is, what we use it for","text":"<p>DLRN (can be read as \"Delorean\") is an application that helps us do continuous packaging of RDO. It is used to build packages using the latest commit from each of the OpenStack project repositories.</p> <p>DLRN can be run as a standalone application to create a single package, or periodically (using a cron job) to rebuild all packages listed for a specific release.</p>"},{"location":"factory/dlrn/#high-level-dlrn-flow","title":"High-level DLRN flow","text":"<p>The basic DLRN flow is:</p> <ul> <li>For each package listed in the RDO metadata file:<ul> <li>Fetch the latest upstream commit from the OpenStack Git repositories</li> <li>Fetch the latest commit from the distgit repositories</li> <li>Build an RPM package using the source and distgit commits</li> <li>Create a YUM repository with that package, and the latest build package for the other packages</li> <li>If a package build fails, open a review in the RDO Gerrit to track and fix the issue.</li> </ul> </li> </ul> <p>The result of each DLRN run is an RDO Trunk repository, containing the latest commit from each supported OpenStack project, ready to be consumed.</p>"},{"location":"factory/dlrn/#tips-and-tricks","title":"Tips and tricks","text":""},{"location":"factory/dlrn/#multiple-branch-support","title":"Multiple branch support","text":"<p>DLRN can build packages using different upstream branches, not only master. For example, we have DLRN workers building packages for the Newton and Mitaka releases. That allows us to test each commit landing to stable/newton and stable/mitaka before it is part of a release. We can select which releases we want to build a package for using tags in the RDO metadata file, for example:</p> <pre><code>- project: watcher\n  conf: rpmfactory-core\n  tags:\n    ocata-uc:\n    ocata:\n    newton:\n</code></pre> <p>This project (openstack-watcher) is built for Ocata (master) and Newton.</p>"},{"location":"factory/dlrn/#setting-up-a-dlrn-instance","title":"Setting up a DLRN instance","text":"<p>You can follow the instructions from the README file to set up a test instance. The Puppet module we use to build the RDO instances is also available if you want to take a look at how to configure multiple instances on a single machine.</p>"},{"location":"factory/pipeline/","title":"The delivery pipeline","text":"<p>This is the 10,000 foot view of the RDO delivery pipeline. For more detail, see the various more in-depth documents:</p>"},{"location":"factory/pipeline/#trunk-chasing","title":"Trunk chasing","text":"<p>We use DLRN to track upstream changes and build continuously OpenStack as a RPM distribution. Then our Zuul spfCI hosted on SoftwareFactory runs multiple jobs on DLRN snapshots. We use the WeIRDO framework to run the same jobs as upstream CI on our packages. This allows us to detect early integration issues and get either our packaging or upstream projects fixed.</p>"},{"location":"factory/pipeline/#branching","title":"Branching","text":"<p>We start branching RDO stable release around milestone 3, and have stable builds getting bootstrapped. This includes:</p> <ul> <li>registering packages in CBS, which is scripted using the rdoinfo database.</li> <li>syncing requirements in packages.</li> <li>branching distgit repositories.</li> <li>building upstream releases in CBS. This part used to be semi-automated using rdopkg tool, and currently being consolidated into a cron job creating reviews.</li> <li>tag builds in -testing repositories, some automation is in preparation. <p>Trunk chasing continues, but we pay attention in keeping promotions happening more frequently to avoid a gap between tested upstream commits and releases.</p>"},{"location":"factory/pipeline/#ga-publication","title":"GA publication","text":"<p>Since OpenStack does releases slightly ahead of time, we have most of GA releases built in CBS, but some of them comes late. We also trim final GA repositories, use repoclosure utility to check if there's no missing dependencies. Before mass-tagging builds in -release we launch stable promotion CI jobs and if they're green, we publish them. <p>At this stage, CentOS Core team, creates final GA repositories and sign packages.</p>"},{"location":"factory/promotion-pipeline/","title":"Workflow: Promotion pipeline","text":"<p>Promotion pipelines are composed by a set of related CI jobs that are executed for each supported OpenStack release to test the content of a specific RDO repository. For each OpenStack release Puppet promotion pipelines are proceeded, to validate RDO packages with OpenStack Puppet  Modules and to promote the RDO packages used in upstream OpenStack Puppet modules check and gate jobs.</p> <p>This pipeline run in parallel and is composed of different jobs.</p> <p>The promotion workflow can be described with following schema:</p> <ol> <li> <p>Define the repository to be tested. RDO Trunk repositories are identified by a hash based on the upstream commit of the last built package. The content of these repos doesn't change over time. When a promotion pipeline is launched, it grabs the latest consistent hash repo and sets it to be tested in the following phases.</p> </li> <li> <p>Deploy and test RDO. We run a set of jobs which deploy and test OpenStack using different installers and scenarios to ensure they behave as expected. Currently, there are following promotion testing method:</p> <ul> <li>OpenStack Puppet scenarios. Project puppet-openstack-integration (a.k.a. p-o-i)   maintains a set of Puppet manifests to deploy different OpenStack services   combinations and configurations (scenarios) in a single server using OpenStack   Puppet Modules, and run tempest smoke tests for the deployed services. The   tested services on each scenario can be found in the   README   for p-o-i. These scenarios, together with Packstack deployment ones, are executed in puppet   promotion pipelines to test new packages build in RDO Repos.   Part of scenarios are currently tested in RDO CI as Packstack deployment.</li> </ul> </li> <li> <p>Repository and images promotion. When all jobs in the previous phase succeed, the tested repository is considered good and it is promoted so that users can use these packages:</p> <ul> <li>The repo is published using RDO Trunk servers in https://trunk.rdoproject.org/centos9-\\&lt;openstack_version&gt;/current-passed-ci/delorean.repo</li> </ul> </li> </ol>"},{"location":"factory/promotion-pipeline/#tools-used-in-rdo-ci","title":"Tools used in RDO CI","text":"<ul> <li>Jobs definitions are managed using Zuul, via a gerrit review workflow in review.rdoproject.org</li> <li>WeIRDO is the tool we use to run p-o-i and Packstack testing scenarios defined upstream inside RDO CI. It is composed of a set of ansible roles and playbooks that prepare the environment and deploy and test the installers using the testing scripts provided by the projects.</li> <li>ARA is used to store and visualize the results of ansible playbook runs, making it easier to analize and troubleshoot them.</li> </ul>"},{"location":"factory/promotion-pipeline/#infrastructure","title":"Infrastructure","text":"<p>RDO runs the promotion pipelines in the CI infrastructure managed by Software Factory.</p>"},{"location":"factory/promotion-pipeline/#handling-issues-in-rdo-ci","title":"Handling issues in RDO CI","text":"<p>An important aspect of running RDO CI is properly managing the errors found in the jobs included in the promotion pipelines. The root cause of these issues sometimes is in the OpenStack upstream projects:</p> <ul> <li>Some problems are not caught in devstack-based jobs running in upstream gates.</li> <li>In some cases, new versions of OpenStack services require changes in the deployment tools</li> </ul> <p>One of the contributions of RDO to upstream projects is to increase test coverage of the projects and help to identify the problems as soon as possible. When we find them, we report it upstream as Launchpad bugs and propose fixes when possible.</p>"},{"location":"factory/promotion-pipeline/#status-of-promotion-pipelines","title":"Status of promotion pipelines","text":"<p>If you are interested in the status of the promotion pipelines in RDO CI you can check:</p> <ul> <li> <p>Zuul pipelines status view can be used to see the result and status of each kind of puppet promotion pipeline and OpenStack release.</p> </li> <li> <p>RDO Dashboard shows the overall status of RDO promotion pipelines.</p> </li> </ul> <p></p> <ul> <li>RDO FTBFS Dashboard shows status of currently failed package build attempts.</li> </ul> <p></p>"},{"location":"factory/promotion-pipeline/#more-info","title":"More info","text":"<ul> <li>Weirdo: A talk about CI in OpenStack and RDO by dmsimard.</li> <li>ARA blog posts - from dmsimard blog</li> <li>Ci in RDO: What do we test? - presentation in RDO and Ceph Meetup BCN.</li> <li>RDO dashboards repo</li> </ul>"},{"location":"factory/workflow-overview/","title":"Infrastructure","text":"<p>The following pieces of infrastructure are used during the cycle:</p> <ul> <li>review.rdoproject.org is the central system for our workflow, powered by SoftwareFactory. It contains a Gerrit instance to manage all changes to the repositories where the spec files used to build our packages are contained, as well as the components managing our CI infrastructure.</li> <li>Our distgit repositories contain one repository for each project built by RDO, where the spec files are located. Every change submitted via review.rdoproject.org is synchronized to the repos at GitHub.</li> <li>The RDO Trunk repositories contain the latest packages.</li> <li>The Zuul CI infrastructure is used to run the periodic jobs to promote the latest repositories.</li> </ul>"},{"location":"misc/networking/","title":"Network troubleshooting","text":"<p>Check out this webcast - an overview of networking principles and how they apply to Neutron and OpenvSwitch - by Dave Neary.</p>"},{"location":"misc/networking/#toolchain","title":"Toolchain","text":"<p>A number of tools come in handy when troubleshooting Neutron/Quantum networking issues.</p> <ul> <li>Open vSwitch (documentation)<ul> <li>ovs-vsctl - tool for querying and configuring ovs-vswitchd</li> <li>ovs-ofctl - OpenFlow configuration tool</li> <li>ovs-dpctl - query and configure Open vSwitch datapaths</li> </ul> </li> <li>iproute tools<ul> <li>iproute2 HOWTO</li> </ul> </li> <li>tcpdump (see next section)<ul> <li>tcpdump documentation</li> </ul> </li> </ul>"},{"location":"misc/networking/#tcpdump","title":"tcpdump","text":"<p>tcpdump will be your best friend so it's best to learn and understand how to use it. When debugging routing issues with quantum, tcpdump can be used to investigate the ingress and egress of traffic. For example:</p> <pre><code>       tcpdump -n -i br-int\n</code></pre> <p>The above command will capature all traffic on the internal bridge interface.</p> <pre><code>       tcpdump -n -i br-int  -w tcpdump.pcap\n</code></pre> <p>The above command will capture all traffic on the internal bridge interface and dump it to a file named tcpdump.pcap.</p> <pre><code>       tcpdump -r tcpdump.pcap\n</code></pre> <p>The above command will read in a previously created tcpdump file</p> <pre><code>       tcpdump -n -i any\n</code></pre> <p>The above command will capture all traffic on any interface. ...</p>"},{"location":"misc/networking/#iproute2","title":"iproute2","text":"<p>iproute2 provides a tool called ip which allows you to debug what is going on.</p> <p>Here are some diagnostics commands for networking (assuming you are using Neutron). Of-course, you'll replace the router namespace, dhcp namespace IDs , IP addresses accordingly:</p> <pre><code># List namespaces\n$ ip netns\nqdhcp-4a04382f-03bf-49a9-9d4a-35ab9ffc22ad\nqrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f\n\n# Show all interfaces inside the namespace\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ip a\n\n# Check routing table inside the router namespace\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ip r\n\n# IP config inside the router namesapce\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ifconfig\n\n# IP configu inside the dhcp namesace\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ifconfig\n\n# Ping the private IP (of the cirros guest)\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ping -c2 30.0.0.7\n$ ip netns exec qrouter-1fabd5f0-f80b-468d-b733-1b80d0c3e80f \\\n  ping -c2 192.168.122.14\n\n# ssh into cirros guest\n$ ip netns exec qdhcp-4a04382f-03bf-49a9-9d4a-35ab9ffc22ad ssh   cirros@30.0.0.7\n</code></pre>"},{"location":"misc/networking/#common-issues","title":"Common issues","text":"<ul> <li> <p>I can create an instance, but cannot SSH or ping it</p> <ul> <li> <p>Verify that traffic to port 22 and ICMP traffic of any type (-1:-1) is allowed in the default security group     In the dashboard, in the Project tab, under \"Access and Security\", check the rules which are active on the security group you are using with your instances (typically \"default\"). You should see a rule allowing traffic to port 22 over tcp from all hosts, and a port enabling icmp traffic of all types (-1). If you don't, create the necessary rules, and try again.</p> </li> <li> <p>Verify that you can ping and SSH the host where the instance is running     From the host where you are attempting to connect to your instance, verify that network traffic is being correctly routed to the compute node in question.</p> </li> <li> <p>Ensure that the router is correctly created, that the internal subnet and external subnet are attached to it, and that it can route traffic from your IP to the instance IP     If your VM is in the 192.168.1.x subnet, and the host from which you are trying to connect is in the 192.168.0.x subnet, then you will need to have a route from one to the other. Ensure that the subnet 192.168.1.x and 192.168.0.x are both added to a router which you create in Neutron</p> </li> <li> <p>Check that you can ping an instance from inside its network namespace.     If you are using network namespaces, then each VLAN will have its own namespace, and entities inside that namespace will be invisible from outside. You can check whether you can ping an instance from inside the namespace by first finding the namespace identifier, and then using the iproute toolset to execute a \"ping\" inside that namespace:</p> </li> </ul> </li> </ul> <pre><code>ip netns list\n# Identify virtual router to which your subnet is connected\nip netns exec qrouter-de0b9dbe-6b65-45ee-9ff2-c752c7937a9e ping 10.10.0.7\n# IP address and qrouter ID correspond to the network namespace and private IP address for instance\n\n-   Check the OVS routing table to ensure that it is correctly routing traffic from internal to external.\n    You should see a route for each subnet attached to your virtual router, and you should see routing which will allow traffic from the VM to get to the subnet of the host from which you are trying to connect (or to a public gateway)\n\n        ip netns exec qrouter-de0b9dbe-6b65-45ee-9ff2-c752c7937a9e route -n\n\n-   Verify that br-ex is associated with the physical NIC, and that the virtual router can route traffic to the IP address of the host. For a single NIC set-up, you will need to bring up br-ex at boot time, and connect eth0 to it.\n    To set up br-ex initially (on a host with static IP 192.168.0.2), the following will do the initial configuration:\n</code></pre> <pre><code>ip addr flush eth0\novs-vsctl add-port br-ex eth0\nip addr add 192.168.0.2 dev br-ex\nip link set br-ex up\n</code></pre> <p>To make changes persist after boot, you will need to create /etc/sysconfig/network-scripts/ifcfg-br-ex as follows (replace DNS, IP addresses for your local network):</p> <pre><code>DEVICE=br-ex\nTYPE=Ethernet\nBOOTPROTO=static\nONBOOT=yes\nIPADDR=192.168.0.2\nNETMASK=255.255.255.0\nGATEWAY=192.168.0.1\nDNS1=89.2.0.1\nDNS2=89.2.0.1\nDOMAIN=neary.home\nNAME=\"System br-ex\"\n</code></pre> <p>After this, you will no longer need to bring up eth0, and all going well you will be able to access both instances and the management interface on the same host.</p> <ul> <li>I cannot associate a floating IP with an instance<ul> <li>If the error is that the external network is not visible from the subnet: Check that br-ex has its MAC address set correctly. Check for the error \"Device or resource busy\" in /var/log/messages - if it's present, you will need to bring down br-ex, set its MAC address to match that of the physical NIC, and bring it back up.</li> </ul> </li> <li>I can create an instance, however, it does not get a DHCP address<ul> <li>See openstack documentation for information on sniffing the various steps of the allocation of an IP address by DHCP - verify that your DHCP agent is running, is receiving the DHCPDISCOVER request, and is replying to it - and verify that your host is receiving the DHCP reply.</li> <li>Make sure that IPv6 is enabled. Disabling IPv6 will give an error such as \"Address family not supported\".</li> <li>If you are using OpenvSwitch with VLAN, make sure that the network created includes VLAN information. You may need to restart the quantum-openvswitch-agent service and/or create a network using specific VLAN information.</li> </ul> </li> </ul> <ul> <li>If you are using more than one node for OpenStack (i.e., not an all-in-one installation), then you must use VLANs.</li> <li>If you are using a virtual machine as a node in OpenStack, you must use the virtio network driver when using VLANs. The default rt8139 driver seems to drop VLAN information.</li> <li>You must have an external network set as the gateway to the router if you want to get network traffic out of the private instance network.</li> </ul>"},{"location":"misc/networking/#other-resources","title":"Other resources","text":"<ul> <li>Network troubleshooting (OpenStack Operations Guide)</li> </ul> <p>"},{"location":"misc/qpid-errors/","title":"Qpid errors","text":""},{"location":"misc/qpid-errors/#config-file-errors","title":"Config file errors","text":"<p>If you see something like the following message in your system log when the qpidd service attempts to start:</p> <pre><code>Jul 22 15:39:08 localhost qpidd[8631]: 2013-07-22 15:39:08 [Broker] critical Unexpected error: Error in configuration file /etc/qpidd.conf: Bad argument: |cluster-mechanism=DIGEST-MD5 ANONYMOUS|\n</code></pre> <p>Replace 'cluster-mechanism' with 'ha-mechanism' in /etc/qpidd.conf then restart the qpidd service, or reboot.</p>"},{"location":"misc/qpid-errors/#sasldb-errors","title":"sasldb errors","text":"<p>The qpid user database may become corrupted. This may be evidenced by error messages such as:</p> <pre><code>     qpidd: unable to open Berkeley db /var/lib/qpidd/qpidd.sasldb: No such file or directory\n</code></pre> <p>You can recreate the sasldb file using the following command:</p> <pre><code>     saslpasswd2 -f /var/lib/qpidd/qpidd.sasldb -u QPID guest\n</code></pre> <p>Provide the password at the command line (usually 'guest'), and the file will be created. You should further ensure that /etc/cinder/cinder.conf references the correct username and password corresponding with this file. Then restart qpidd:</p> <pre><code>     service qpidd restart\n</code></pre> <p>You can verify the presence of users accounts in that file with:</p> <pre><code>     sasldblistusers2 -f /var/lib/qpidd/qpidd.sasldb\n</code></pre>"},{"location":"misc/selinux-issues/","title":"SELinux issues","text":""},{"location":"misc/selinux-issues/#troubleshooting-selinux-issues","title":"Troubleshooting SELinux issues","text":""},{"location":"misc/selinux-issues/#general-tips","title":"General tips","text":"<p>SELinux can sometimes be a source of issues with OpenStack. On a system with SELinux enabled (as it is by default on Fedora and RHEL), you can check for denial messages with the command:</p> <pre><code>sudo cat /var/log/audit/audit.log | grep -i avc\n</code></pre> <p>or</p> <pre><code>sudo sealert -a /var/log/audit/audit.log\n</code></pre> <p>You can check the SELinux enforcement status of your machine with the command \"sestatus\" and can temporarily place SELinux in enforcing (in which it blocks access violations) or permissive (logs access violations, but does not block) with the commands \"setenforce 1\" and \"setenforce 0\", respectively.</p> <p>To make SELinux enforcement changes that persist between reboots, edit the file /etc/selinux/config.</p> <p>To see what the current security context for a resource ls, run</p> <pre><code>ls -Z\n</code></pre> <p>For more information on SELinux troubleshooting, see http://fedoraproject.org/wiki/SELinux/Troubleshooting.</p>"},{"location":"misc/selinux-issues/#filing-bugzillas-jira-ticket","title":"Filing Bugzillas Jira ticket","text":"<p>Sometimes, there are missing policies required in order released RDO versions to work correctly with SELinux in enforcing mode. In order for the RDO developers to troubleshoot the problem, please perform the following:</p> <ul> <li>Set SELinux to permissive mode</li> <li> <p>Zero out your /var/log/audit/audit.log:         sudo cp /dev/null /var/log/audit/audit.log</p> </li> <li> <p>Perform a full test of the use case that is causing the problem</p> </li> <li>File a Jira ticket and attach your /var/log/audit/audit.log</li> </ul> <p>For more information about how SELinux policies are developed for RDO, see SELinux</p>"},{"location":"misc/selinux-issues/#packstack-fails-if-selinux-is-disabled","title":"PackStack fails if SELinux is disabled","text":"<p>It has been reported that PackStack will fail if SELinux is disabled.</p> <p>The error observed is:</p> <pre><code>ERROR : Error during puppet run : err: /Stage[main]//Exec[setenforce 0]/returns:\nchange from notrun to 0 failed: setenforce 0 returned 1 instead of one of [0]\nat /var/tmp/packstack/51a57c45478b4091b2eb6a1bbd4c2303/manifests/my_public_ip_ring_swift.pp:56\nPlease check log file /var/tmp/packstack/20130421-002212-fYYLUA/openstack-setup.log for more information\n</code></pre> <p>The solution is to enable SELinux in permissive mode (if there is a reason not to have it in enforcing mode). In</p> <pre><code>/etc/selinux/config\n</code></pre> <p>set</p> <pre><code>SELINUX=permissive\n</code></pre> <p>If you have previously disabled SELinux, you will need to re-label the filesystem, since when SELinux is disabled, this does not happen for new files, and failing to relabel will likely cause many false positive issues. The easiest way to do that is to do the following as root:</p> <pre><code>touch /.autorelabel\nreboot\n</code></pre> <p>This issue is being tracked in Red Hat Bugzilla bug #954188</p> <p>"},{"location":"misc/selinux/","title":"SELinux in an RDO Deployment","text":"<p>RDO releases should operate with SELinux in enforcing mode without issue. If it does not work for you, please see the SELinux_issues page for more information on how to troubleshoot and what information to gather for filing bugzillas.</p> <p>From time to time, especially with the EL6 releases of RDO, certain measures are taken to ensure that RDO works and are distributed as part of the openstack-selinux package. This package contains fixes to ensure RDO continues working on top of the latest Red Hat Enterprise Linux 6 and CentOS 6 releases. It always advised to run the very latest selinux-policy package appropriate for your distribution, even if you upgrade nothing else. For example, if you are running CentOS 6.4, it is recommended to run the latest selinux-policy package from CentOS 6.5 if at all possible.</p> <p>Occasionally, RDO developers will even release updated selinux-policy packages to ensure that your RDO systems stay operational with the latest RDO releases.</p>"},{"location":"misc/selinux/#selinux-during-rdo-development","title":"SELinux during RDO Development","text":"<p>RDO releases interim releases during upstream OpenStack development based on upstream milestones. For example, \"icehouse-1\". Shortly thereafter, the RDO team schedules Test Days in order to gather information on what needs to be fixed.</p> <p>OpenStack is often in heavy development during these interim releases. Consequently, SELinux is likely to stand in the way of performing useful testing during these test days. For this reason, it is recommended to run in permissive mode during test days and gather AVCs:</p> <pre><code>sudo setenforce 0\n</code></pre> <p>The RDO team typically waits to coordinate with upstream SELinux policy developers until after the upstream \"-3\" milestone, which is the Feature Freeze for the next OpenStack release. This is because the high pace of innovation that takes place during OpenStack development cycles makes writing SELinux policy modules difficult to keep up with; it is similar to trying to keep localization work up to date.</p>"},{"location":"misc/selinux/#what-about-a-modular-selinux-policy","title":"What about a modular SELinux policy?","text":"<p>I get a lot of questions about this. The short answer is that SELinux policies are not conducive to being separated in to multiple git repositories/packages at this time.</p> <p>(still work in progress)</p>"},{"location":"misc/troubleshoot/","title":"Troubleshooting","text":"<p>Every piece of software as complex as OpenStack has some pitfalls in its usage. We will use this page to collect tips and tricks related to installation and configuration issues, and issues which people run into during the lifetime of their OpenStack deployment.</p> <ul> <li>Troubleshooting networking</li> <li>SELinux issues</li> <li>Uninstalling RDO</li> <li>qpidd/AMQP troubleshooting</li> </ul>"},{"location":"misc/uninstalling-rdo/","title":"Uninstalling RDO","text":"<p>There is no automated uninstall process for RDO (or OpenStack in general) because OpenStack consists of multiple services, (possibly) running across multiple systems. At this time there is no way to identify all of the various parts, locate them, and safely uninstall them.</p> <p>Since OpenStack installations are almost certain to be deployed on dedicated systems (or VMs), the most reasonable way to \"uninstall\" RDO is to reinstall the base OS and start fresh.</p>"}]}